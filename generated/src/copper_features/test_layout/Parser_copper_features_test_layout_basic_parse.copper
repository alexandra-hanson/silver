<?xml version="1.0" encoding="UTF-8"?>

<CopperSpec xmlns="http://melt.cs.umn.edu/copper/xmlns">
  <Parser id="copper_features_test_layout_basic_parse" isUnitary="true">
    <PP>copper_features:test_layout:basic_parse</PP>
    <Grammars><GrammarRef id="host"/></Grammars>
    <StartSymbol><NonterminalRef id="copper_features_test_layout_basics_BRoot" grammar="host" /></StartSymbol>
    <StartLayout><TerminalRef id="copper_features_test_layout_NormalWhiteSpace_t" grammar="host" /></StartLayout>
    <ClassAuxiliaryCode><Code><![CDATA[
          protected List<common.Terminal> tokenList = null;

          public void reset() {
            tokenList = new ArrayList<common.Terminal>();
          }

          public List<common.Terminal> getTokens() {
            return tokenList; // The way we reset this iterator when parsing again is to create a new list, so this is defacto immutable
          }
        ]]></Code></ClassAuxiliaryCode>
    <ParserInitCode>
      <Code><![CDATA[
        reset();
      ]]></Code>
    </ParserInitCode>
    <Preamble>
<Code><![CDATA[
import java.util.ArrayList;
import java.util.List;
]]></Code>
    </Preamble>
  </Parser>

  <Grammar id="host">

    <PP>host</PP>

    <Layout><TerminalRef id="copper_features_test_layout_NormalWhiteSpace_t" grammar="host" /></Layout>
    <Declarations>
      <ParserAttribute id="context">
        <Type><![CDATA[common.DecoratedNode]]></Type>
        <Code><![CDATA[context = common.TopNode.singleton;]]></Code>
      </ParserAttribute>
         <Terminal id="copper_features_test_layout_NormalWhiteSpace_t">
    <PP>copper_features:test_layout:NormalWhiteSpace_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char="&#13;"/><SingleCharacter char=" "/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char="&#13;"/><SingleCharacter char=" "/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>copper_features.test_layout.TNormalWhiteSpace_t</Type>
    <Code><![CDATA[
RESULT = new copper_features.test_layout.TNormalWhiteSpace_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_test_layout_basics_BTerm">
    <PP>copper_features:test_layout:basics:BTerm</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>copper_features.test_layout.basics.TBTerm</Type>
    <Code><![CDATA[
RESULT = new copper_features.test_layout.basics.TBTerm(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_test_layout_basics_IGN">
    <PP>copper_features:test_layout:basics:IGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="I"/></CharacterSet><CharacterSet><SingleCharacter char="G"/></CharacterSet><CharacterSet><SingleCharacter char="N"/></CharacterSet></Concatenation></Regex>
    <Type>copper_features.test_layout.basics.TIGN</Type>
    <Code><![CDATA[
RESULT = new copper_features.test_layout.basics.TIGN(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>

  <Nonterminal id="copper_features_test_layout_basics_BRoot">
    <PP>copper_features:test_layout:basics:BRoot</PP>
    <Type><![CDATA[copper_features.test_layout.basics.NBRoot]]></Type>
  </Nonterminal>
  <Production id="copper_features_test_layout_basics_anASDF">
    <Code><![CDATA[
RESULT = new copper_features.test_layout.basics.PanASDF(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_test_layout_basics_BRoot" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_test_layout_basics_BTerm" grammar="host" /><TerminalRef id="copper_features_test_layout_basics_BTerm" grammar="host" /></RHS>
    <Layout><TerminalRef id="copper_features_test_layout_basics_IGN" grammar="host" /></Layout>
  </Production>

    </Declarations>
  </Grammar>
</CopperSpec>