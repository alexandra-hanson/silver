<?xml version="1.0" encoding="UTF-8"?>

<CopperSpec xmlns="http://melt.cs.umn.edu/copper/xmlns">
  <Parser id="copper_features_PAparse" isUnitary="true">
    <PP>copper_features:PAparse</PP>
    <Grammars><GrammarRef id="host"/></Grammars>
    <StartSymbol><NonterminalRef id="copper_features_UseDcls" grammar="host" /></StartSymbol>
    <StartLayout><TerminalRef id="copper_features_Space" grammar="host" /></StartLayout>
    <ClassAuxiliaryCode><Code><![CDATA[
          protected List<common.Terminal> tokenList = null;

          public void reset() {
            tokenList = new ArrayList<common.Terminal>();
          }

          public List<common.Terminal> getTokens() {
            return tokenList; // The way we reset this iterator when parsing again is to create a new list, so this is defacto immutable
          }
        ]]></Code></ClassAuxiliaryCode>
    <ParserInitCode>
      <Code><![CDATA[
        reset();
      ]]></Code>
    </ParserInitCode>
    <Preamble>
<Code><![CDATA[
import java.util.ArrayList;
import java.util.List;
]]></Code>
    </Preamble>
  </Parser>

  <Grammar id="host">

    <PP>host</PP>

    <Layout><TerminalRef id="copper_features_Space" grammar="host" /></Layout>
    <Declarations>
      <ParserAttribute id="context">
        <Type><![CDATA[common.DecoratedNode]]></Type>
        <Code><![CDATA[context = common.TopNode.singleton;]]></Code>
      </ParserAttribute>
         <ParserAttribute id="copper_features_Acount">
    <Type><![CDATA[Integer]]></Type>
    <Code><![CDATA[
Integer __action___local_a_local;
__action___local_a_local = Integer.valueOf((int)0);
copper_features_Acount = __action___local_a_local;
]]></Code>
  </ParserAttribute>
  <ParserAttribute id="copper_features_knownlist">
    <Type><![CDATA[common.ConsCell]]></Type>
    <Code><![CDATA[
copper_features_knownlist = ((common.ConsCell)core.Pnil.invoke());
]]></Code>
  </ParserAttribute>
  <Terminal id="copper_features_A">
    <PP>copper_features:A</PP>
    <Regex><CharacterSet><SingleCharacter char="a"/></CharacterSet></Regex>
    <Type>copper_features.TA</Type>
    <Code><![CDATA[
RESULT = new copper_features.TA(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
copper_features_Acount = Integer.valueOf(copper_features_Acount + Integer.valueOf((int)1));
virtualLocation.setFileName(new common.StringCatter((common.StringCatter)new common.StringCatter(virtualLocation.getFileName()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(":")), (common.StringCatter)new common.StringCatter((common.StringCatter)new common.StringCatter(String.valueOf(virtualLocation.getLine())), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter(String.valueOf(virtualLocation.getColumn())))))).toString());
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_B">
    <PP>copper_features:B</PP>
    <Regex><CharacterSet><SingleCharacter char="b"/></CharacterSet></Regex>
    <Type>copper_features.TB</Type>
    <Code><![CDATA[
RESULT = new copper_features.TB(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
virtualLocation.setLine(virtualLocation.getColumn());
virtualLocation.setColumn(copper_features_Acount);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_BangTerm">
    <PP>copper_features:BangTerm</PP>
    <Regex><CharacterSet><SingleCharacter char="!"/></CharacterSet></Regex>
    <Type>copper_features.TBangTerm</Type>
    <Code><![CDATA[
RESULT = new copper_features.TBangTerm(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_Foo_t">
    <PP>copper_features:Foo_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet></Concatenation></Regex>
    <Type>copper_features.TFoo_t</Type>
    <Code><![CDATA[
RESULT = new copper_features.TFoo_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_Id">
    <PP>copper_features:Id</PP>
    <Regex><KleeneStar><CharacterSet><CharacterRange lower="a" upper="z"/></CharacterSet></KleeneStar></Regex>
    <Type>copper_features.TId</Type>
    <Code><![CDATA[
RESULT = new copper_features.TId(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_KnownTerm">
    <PP>copper_features:KnownTerm</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="a" upper="z"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="z"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>copper_features.TKnownTerm</Type>
    <Code><![CDATA[
RESULT = new copper_features.TKnownTerm(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_QuoteLiteral">
    <PP>copper_features:QuoteLiteral</PP>
    <Regex><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Regex>
    <Type>copper_features.TQuoteLiteral</Type>
    <Code><![CDATA[
RESULT = new copper_features.TQuoteLiteral(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_Space">
    <PP>copper_features:Space</PP>
    <Regex><CharacterSet><SingleCharacter char=" "/></CharacterSet></Regex>
    <Type>copper_features.TSpace</Type>
    <Code><![CDATA[
RESULT = new copper_features.TSpace(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="copper_features_UnknownTerm">
    <PP>copper_features:UnknownTerm</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="a" upper="z"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="z"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>copper_features.TUnknownTerm</Type>
    <Code><![CDATA[
RESULT = new copper_features.TUnknownTerm(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <DisambiguationFunction id="copper_features___disam17">
    <Members><TerminalRef id="copper_features_Foo_t" grammar="host" /><TerminalRef id="copper_features_Id" grammar="host" /></Members>
    <Code><![CDATA[
return (Integer)(((Boolean)core.PcontainsBy.invoke(core.PstringEq.factory, new common.StringCatter(lexeme), ((common.ConsCell)core.Pcons.invoke((new common.StringCatter("foo")), ((common.ConsCell)core.Pcons.invoke((new common.StringCatter("bar")), ((common.ConsCell)core.Pnil.invoke()))))))) ? copper_features_Foo_t : copper_features_Id);
]]></Code>
  </DisambiguationFunction>
  <DisambiguationFunction id="copper_features___disam48">
    <Members><TerminalRef id="copper_features_KnownTerm" grammar="host" /><TerminalRef id="copper_features_UnknownTerm" grammar="host" /></Members>
    <Code><![CDATA[
return (Integer)(((Boolean)core.PcontainsBy.invoke(core.PstringEq.factory, new common.StringCatter(lexeme), copper_features_knownlist)) ? copper_features_KnownTerm : copper_features_UnknownTerm);
]]></Code>
  </DisambiguationFunction>

  <Nonterminal id="copper_features_AOrB">
    <PP>copper_features:AOrB</PP>
    <Type><![CDATA[copper_features.NAOrB]]></Type>
  </Nonterminal>
  <Production id="copper_features_aorb_b">
    <Code><![CDATA[
RESULT = new copper_features.Paorb_b(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_AOrB" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_B" grammar="host" /></RHS>
  </Production>
  <Production id="copper_features_aorb_a">
    <Code><![CDATA[
RESULT = new copper_features.Paorb_a(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_AOrB" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_A" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="copper_features_AOrBs">
    <PP>copper_features:AOrBs</PP>
    <Type><![CDATA[copper_features.NAOrBs]]></Type>
  </Nonterminal>
  <Production id="copper_features_aorb_cons">
    <Code><![CDATA[
RESULT = new copper_features.Paorb_cons(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_AOrBs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="copper_features_AOrB" grammar="host" /><NonterminalRef id="copper_features_AOrBs" grammar="host" /></RHS>
  </Production>
  <Production id="copper_features_aorb_one">
    <Code><![CDATA[
RESULT = new copper_features.Paorb_one(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_AOrBs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="copper_features_AOrB" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="copper_features_DGRoot">
    <PP>copper_features:DGRoot</PP>
    <Type><![CDATA[copper_features.NDGRoot]]></Type>
  </Nonterminal>
  <Production id="copper_features_rt2">
    <Code><![CDATA[
RESULT = new copper_features.Prt2(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_DGRoot" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_Foo_t" grammar="host" /></RHS>
  </Production>
  <Production id="copper_features_rt">
    <Code><![CDATA[
RESULT = new copper_features.Prt(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_DGRoot" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_Id" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="copper_features_UseDcl">
    <PP>copper_features:UseDcl</PP>
    <Type><![CDATA[copper_features.NUseDcl]]></Type>
  </Nonterminal>
  <Production id="copper_features_dDcl">
    <Code><![CDATA[
RESULT = new copper_features.PdDcl(_children[0], _children[1]);
copper_features_knownlist = ((common.ConsCell)core.Pcons.invoke(((common.StringCatter)((copper_features.TUnknownTerm)((common.Node)RESULT).getChild(copper_features.PdDcl.i_l)).lexeme), copper_features_knownlist));
]]></Code>
    <LHS><NonterminalRef id="copper_features_UseDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_BangTerm" grammar="host" /><TerminalRef id="copper_features_UnknownTerm" grammar="host" /></RHS>
  </Production>
  <Production id="copper_features_kUse">
    <Code><![CDATA[
RESULT = new copper_features.PkUse(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_UseDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_KnownTerm" grammar="host" /></RHS>
  </Production>
  <Production id="copper_features_unUse">
    <Code><![CDATA[
RESULT = new copper_features.PunUse(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_UseDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="copper_features_UnknownTerm" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="copper_features_UseDcls">
    <PP>copper_features:UseDcls</PP>
    <Type><![CDATA[copper_features.NUseDcls]]></Type>
  </Nonterminal>
  <Production id="copper_features_consud">
    <Code><![CDATA[
RESULT = new copper_features.Pconsud(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_UseDcls" grammar="host" /></LHS>
    <RHS><NonterminalRef id="copper_features_UseDcl" grammar="host" /><NonterminalRef id="copper_features_UseDcls" grammar="host" /></RHS>
  </Production>
  <Production id="copper_features_oneud">
    <Code><![CDATA[
RESULT = new copper_features.Poneud(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="copper_features_UseDcls" grammar="host" /></LHS>
    <RHS><NonterminalRef id="copper_features_UseDcl" grammar="host" /></RHS>
  </Production>

    </Declarations>
  </Grammar>
</CopperSpec>