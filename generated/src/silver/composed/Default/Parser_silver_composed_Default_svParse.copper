<?xml version="1.0" encoding="UTF-8"?>

<CopperSpec xmlns="http://melt.cs.umn.edu/copper/xmlns">
  <Parser id="silver_composed_Default_svParse" isUnitary="true">
    <PP>silver:composed:Default:svParse</PP>
    <Grammars><GrammarRef id="host"/></Grammars>
    <StartSymbol><NonterminalRef id="silver_definition_core_Root" grammar="host" /></StartSymbol>
    <StartLayout><TerminalRef id="silver_definition_core_BlockComments" grammar="host" /><TerminalRef id="silver_definition_core_Comments" grammar="host" /><TerminalRef id="silver_definition_core_WhiteSpace" grammar="host" /></StartLayout>
    <ClassAuxiliaryCode><Code><![CDATA[
          protected List<common.Terminal> tokenList = null;

          public void reset() {
            tokenList = new ArrayList<common.Terminal>();
          }

          public List<common.Terminal> getTokens() {
            return tokenList; // The way we reset this iterator when parsing again is to create a new list, so this is defacto immutable
          }
        ]]></Code></ClassAuxiliaryCode>
    <ParserInitCode>
      <Code><![CDATA[
        reset();
      ]]></Code>
    </ParserInitCode>
    <Preamble>
<Code><![CDATA[
import java.util.ArrayList;
import java.util.List;
]]></Code>
    </Preamble>
  </Parser>

  <Grammar id="host">

    <PP>host</PP>

    <Layout><TerminalRef id="silver_definition_core_BlockComments" grammar="host" /><TerminalRef id="silver_definition_core_Comments" grammar="host" /><TerminalRef id="silver_definition_core_WhiteSpace" grammar="host" /></Layout>
    <Declarations>
      <ParserAttribute id="context">
        <Type><![CDATA[common.DecoratedNode]]></Type>
        <Code><![CDATA[context = common.TopNode.singleton;]]></Code>
      </ParserAttribute>
         <TerminalClass id="silver_definition_core_BUILTIN" />
  <TerminalClass id="silver_definition_core_COMMENT" />
  <TerminalClass id="silver_definition_core_IDENTIFIER" />
  <TerminalClass id="silver_definition_core_KEYWORD" />
  <TerminalClass id="silver_definition_core_LITERAL" />
  <TerminalClass id="silver_definition_core_MODSTMT" />
  <TerminalClass id="silver_definition_core_RESERVED" />
  <TerminalClass id="silver_definition_core_SPECOP" />
  <TerminalClass id="silver_definition_core_TYPE" />
  <TerminalClass id="silver_definition_regex_REGEX_ESC" />
  <TerminalClass id="silver_definition_regex_REGEX_OPER" />
  <TerminalClass id="silver_extension_doc_core_DOC" />
  <Terminal id="silver_definition_concrete_syntax_Association_kwd">
    <PP>silver:definition:concrete_syntax:Association_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.concrete_syntax.TAssociation_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.TAssociation_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_concrete_syntax_Ignore_kwd">
    <PP>silver:definition:concrete_syntax:Ignore_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.concrete_syntax.TIgnore_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.TIgnore_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_concrete_syntax_Left_kwd">
    <PP>silver:definition:concrete_syntax:Left_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.concrete_syntax.TLeft_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.TLeft_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_concrete_syntax_Marking_kwd">
    <PP>silver:definition:concrete_syntax:Marking_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.concrete_syntax.TMarking_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.TMarking_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_concrete_syntax_Operator_kwd">
    <PP>silver:definition:concrete_syntax:Operator_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.concrete_syntax.TOperator_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.TOperator_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_concrete_syntax_Precedence_kwd">
    <PP>silver:definition:concrete_syntax:Precedence_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.concrete_syntax.TPrecedence_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.TPrecedence_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_concrete_syntax_Right_kwd">
    <PP>silver:definition:concrete_syntax:Right_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.concrete_syntax.TRight_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.TRight_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Abstract_kwd">
    <PP>silver:definition:core:Abstract_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TAbstract_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TAbstract_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_And_t">
    <PP>silver:definition:core:And_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&amp;"/></CharacterSet><CharacterSet><SingleCharacter char="&amp;"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>6</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TAnd_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TAnd_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Annotation_kwd">
    <PP>silver:definition:core:Annotation_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TAnnotation_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TAnnotation_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_As_kwd">
    <PP>silver:definition:core:As_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TAs_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TAs_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Aspect_kwd">
    <PP>silver:definition:core:Aspect_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TAspect_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TAspect_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Attribute_kwd">
    <PP>silver:definition:core:Attribute_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TAttribute_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TAttribute_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_BlockComments">
    <PP>silver:definition:core:BlockComments</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="{"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet><KleeneStar><Choice><Concatenation><CharacterSet><SingleCharacter char="{"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet><KleeneStar><Choice><CharacterSet invert="true"><SingleCharacter char="-"/></CharacterSet><Concatenation><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="-"/></CharacterSet></KleeneStar></Concatenation><CharacterSet invert="true"><SingleCharacter char="}"/><SingleCharacter char="-"/></CharacterSet></Concatenation></Choice></KleeneStar><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="-"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="}"/></CharacterSet></Concatenation><CharacterSet invert="true"><SingleCharacter char="-"/></CharacterSet><Concatenation><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="-"/></CharacterSet></KleeneStar></Concatenation><CharacterSet invert="true"><SingleCharacter char="}"/><SingleCharacter char="-"/></CharacterSet></Concatenation></Choice></KleeneStar><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="-"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="}"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TBlockComments</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TBlockComments(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_COMMENT" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_CCEQ_t">
    <PP>silver:definition:core:CCEQ_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char=":"/></CharacterSet><CharacterSet><SingleCharacter char=":"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TCCEQ_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TCCEQ_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Closed_kwd">
    <PP>silver:definition:core:Closed_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TClosed_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TClosed_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_ColonColon_t">
    <PP>silver:definition:core:ColonColon_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char=":"/></CharacterSet><CharacterSet><SingleCharacter char=":"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>14</Precedence>
      <RightAssociative/>
    </Operator>
    <Type>silver.definition.core.TColonColon_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TColonColon_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Colon_t">
    <PP>silver:definition:core:Colon_t</PP>
    <Regex><CharacterSet><SingleCharacter char=":"/></CharacterSet></Regex>
    <Type>silver.definition.core.TColon_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TColon_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Comma_t">
    <PP>silver:definition:core:Comma_t</PP>
    <Regex><CharacterSet><SingleCharacter char=","/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>4</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>silver.definition.core.TComma_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TComma_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Comments">
    <PP>silver:definition:core:Comments</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="&#10;"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>silver.definition.core.TComments</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TComments(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_COMMENT" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Concrete_kwd">
    <PP>silver:definition:core:Concrete_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TConcrete_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TConcrete_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Decorate_kwd">
    <PP>silver:definition:core:Decorate_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TDecorate_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TDecorate_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Default_kwd">
    <PP>silver:definition:core:Default_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TDefault_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TDefault_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Divide_t">
    <PP>silver:definition:core:Divide_t</PP>
    <Regex><CharacterSet><SingleCharacter char="/"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>12</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TDivide_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TDivide_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Dot_t">
    <PP>silver:definition:core:Dot_t</PP>
    <Regex><CharacterSet><SingleCharacter char="."/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>25</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TDot_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TDot_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_EQEQ_t">
    <PP>silver:definition:core:EQEQ_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="="/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>9</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TEQEQ_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TEQEQ_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Else_kwd">
    <PP>silver:definition:core:Else_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>4</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>silver.definition.core.TElse_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TElse_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Equal_t">
    <PP>silver:definition:core:Equal_t</PP>
    <Regex><CharacterSet><SingleCharacter char="="/></CharacterSet></Regex>
    <Type>silver.definition.core.TEqual_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TEqual_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Exports_kwd">
    <PP>silver:definition:core:Exports_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TExports_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TExports_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_False_kwd">
    <PP>silver:definition:core:False_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TFalse_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TFalse_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Float_t">
    <PP>silver:definition:core:Float_t</PP>
    <Regex><Concatenation><Choice><CharacterSet><SingleCharacter char="-"/></CharacterSet><EmptyString/></Choice><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="."/></CharacterSet><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation></Regex>
    <Type>silver.definition.core.TFloat_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TFloat_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Forward_kwd">
    <PP>silver:definition:core:Forward_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TForward_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TForward_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Forwarding_kwd">
    <PP>silver:definition:core:Forwarding_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TForwarding_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TForwarding_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Forwards_kwd">
    <PP>silver:definition:core:Forwards_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TForwards_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TForwards_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Function_kwd">
    <PP>silver:definition:core:Function_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TFunction_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TFunction_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_GTEQ_t">
    <PP>silver:definition:core:GTEQ_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>9</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TGTEQ_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TGTEQ_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_GT_t">
    <PP>silver:definition:core:GT_t</PP>
    <Regex><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>9</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TGT_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TGT_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Global_kwd">
    <PP>silver:definition:core:Global_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TGlobal_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TGlobal_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Grammar_kwd">
    <PP>silver:definition:core:Grammar_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TGrammar_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TGrammar_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Hiding_kwd">
    <PP>silver:definition:core:Hiding_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.THiding_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.THiding_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_IdLower_t">
    <PP>silver:definition:core:IdLower_t</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="a" upper="z"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><CharacterRange lower="0" upper="9"/><SingleCharacter char="_"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>silver.definition.core.TIdLower_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TIdLower_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_IdUpper_t">
    <PP>silver:definition:core:IdUpper_t</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="A" upper="Z"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><CharacterRange lower="0" upper="9"/><SingleCharacter char="_"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>silver.definition.core.TIdUpper_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TIdUpper_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_If_kwd">
    <PP>silver:definition:core:If_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TIf_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TIf_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Import_kwd">
    <PP>silver:definition:core:Import_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TImport_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TImport_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Imports_kwd">
    <PP>silver:definition:core:Imports_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TImports_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TImports_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Inherited_kwd">
    <PP>silver:definition:core:Inherited_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TInherited_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TInherited_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Int_t">
    <PP>silver:definition:core:Int_t</PP>
    <Regex><Concatenation><Choice><CharacterSet><SingleCharacter char="-"/></CharacterSet><EmptyString/></Choice><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation></Regex>
    <Type>silver.definition.core.TInt_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TInt_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_LCurly_t">
    <PP>silver:definition:core:LCurly_t</PP>
    <Regex><CharacterSet><SingleCharacter char="{"/></CharacterSet></Regex>
    <Type>silver.definition.core.TLCurly_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TLCurly_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_LParen_t">
    <PP>silver:definition:core:LParen_t</PP>
    <Regex><CharacterSet><SingleCharacter char="("/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>24</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>silver.definition.core.TLParen_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TLParen_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_LTEQ_t">
    <PP>silver:definition:core:LTEQ_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>9</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TLTEQ_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TLTEQ_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_LT_t">
    <PP>silver:definition:core:LT_t</PP>
    <Regex><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>9</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TLT_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TLT_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Length_kwd">
    <PP>silver:definition:core:Length_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TLength_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TLength_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_BUILTIN" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Local_kwd">
    <PP>silver:definition:core:Local_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TLocal_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TLocal_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Minus_t">
    <PP>silver:definition:core:Minus_t</PP>
    <Regex><CharacterSet><SingleCharacter char="-"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>11</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TMinus_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TMinus_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Modulus_t">
    <PP>silver:definition:core:Modulus_t</PP>
    <Regex><CharacterSet><SingleCharacter char="%"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>12</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TModulus_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TModulus_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Multiply_t">
    <PP>silver:definition:core:Multiply_t</PP>
    <Regex><CharacterSet><SingleCharacter char="*"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>12</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TMultiply_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TMultiply_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_NEQ_t">
    <PP>silver:definition:core:NEQ_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>9</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TNEQ_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TNEQ_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_New_kwd">
    <PP>silver:definition:core:New_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TNew_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TNew_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_NonTerminal_kwd">
    <PP>silver:definition:core:NonTerminal_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TNonTerminal_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TNonTerminal_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Not_t">
    <PP>silver:definition:core:Not_t</PP>
    <Regex><CharacterSet><SingleCharacter char="!"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>7</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>silver.definition.core.TNot_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TNot_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Occurs_kwd">
    <PP>silver:definition:core:Occurs_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TOccurs_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TOccurs_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_On_kwd">
    <PP>silver:definition:core:On_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TOn_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TOn_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Only_kwd">
    <PP>silver:definition:core:Only_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TOnly_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TOnly_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Optional_kwd">
    <PP>silver:definition:core:Optional_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TOptional_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TOptional_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Or_t">
    <PP>silver:definition:core:Or_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="|"/></CharacterSet><CharacterSet><SingleCharacter char="|"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>5</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TOr_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TOr_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_PlusPlus_t">
    <PP>silver:definition:core:PlusPlus_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="+"/></CharacterSet><CharacterSet><SingleCharacter char="+"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>10</Precedence>
      <RightAssociative/>
    </Operator>
    <Type>silver.definition.core.TPlusPlus_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TPlusPlus_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Plus_t">
    <PP>silver:definition:core:Plus_t</PP>
    <Regex><CharacterSet><SingleCharacter char="+"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>11</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.definition.core.TPlus_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TPlus_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Production_kwd">
    <PP>silver:definition:core:Production_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TProduction_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TProduction_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_RCurly_t">
    <PP>silver:definition:core:RCurly_t</PP>
    <Regex><CharacterSet><SingleCharacter char="}"/></CharacterSet></Regex>
    <Type>silver.definition.core.TRCurly_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TRCurly_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_RParen_t">
    <PP>silver:definition:core:RParen_t</PP>
    <Regex><CharacterSet><SingleCharacter char=")"/></CharacterSet></Regex>
    <Type>silver.definition.core.TRParen_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TRParen_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Return_kwd">
    <PP>silver:definition:core:Return_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TReturn_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TReturn_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Semi_t">
    <PP>silver:definition:core:Semi_t</PP>
    <Regex><CharacterSet><SingleCharacter char=";"/></CharacterSet></Regex>
    <Type>silver.definition.core.TSemi_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TSemi_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_String_t">
    <PP>silver:definition:core:String_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><KleeneStar><Choice><CharacterSet invert="true"><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/><SingleCharacter char="&quot;"/><SingleCharacter char="\"/></CharacterSet><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="\"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Choice></KleeneStar><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TString_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TString_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Synthesized_kwd">
    <PP>silver:definition:core:Synthesized_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="z"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TSynthesized_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TSynthesized_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Terminal_kwd">
    <PP>silver:definition:core:Terminal_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TTerminal_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TTerminal_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_Then_kwd">
    <PP>silver:definition:core:Then_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TThen_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TThen_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_ToFloat_kwd">
    <PP>silver:definition:core:ToFloat_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="F"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TToFloat_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TToFloat_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_BUILTIN" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_ToInt_kwd">
    <PP>silver:definition:core:ToInt_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="I"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TToInt_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TToInt_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_BUILTIN" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_ToString_kwd">
    <PP>silver:definition:core:ToString_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="S"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TToString_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TToString_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_BUILTIN" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_To_kwd">
    <PP>silver:definition:core:To_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TTo_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TTo_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_True_kwd">
    <PP>silver:definition:core:True_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TTrue_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TTrue_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_UnderScore_t">
    <PP>silver:definition:core:UnderScore_t</PP>
    <Regex><CharacterSet><SingleCharacter char="_"/></CharacterSet></Regex>
    <Type>silver.definition.core.TUnderScore_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TUnderScore_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_WhiteSpace">
    <PP>silver:definition:core:WhiteSpace</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char=" "/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char=" "/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>silver.definition.core.TWhiteSpace</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TWhiteSpace(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_core_With_kwd">
    <PP>silver:definition:core:With_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.core.TWith_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.core.TWith_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_flow_syntax_Flowtype">
    <PP>silver:definition:flow:syntax:Flowtype</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.flow.syntax.TFlowtype</Type>
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.TFlowtype(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_Choice_t">
    <PP>silver:definition:regex:Choice_t</PP>
    <Regex><CharacterSet><SingleCharacter char="|"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TChoice_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TChoice_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_EscapedChar_t">
    <PP>silver:definition:regex:EscapedChar_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet invert="true"><SingleCharacter char="&#10;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.regex.TEscapedChar_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TEscapedChar_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits><TerminalClassRef id="silver_definition_regex_REGEX_ESC" grammar="host" /></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_Kleene_t">
    <PP>silver:definition:regex:Kleene_t</PP>
    <Regex><CharacterSet><SingleCharacter char="*"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TKleene_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TKleene_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_Optional_t">
    <PP>silver:definition:regex:Optional_t</PP>
    <Regex><CharacterSet><SingleCharacter char="?"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TOptional_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TOptional_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_Plus_t">
    <PP>silver:definition:regex:Plus_t</PP>
    <Regex><CharacterSet><SingleCharacter char="+"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TPlus_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TPlus_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_Range_t">
    <PP>silver:definition:regex:Range_t</PP>
    <Regex><CharacterSet><SingleCharacter char="-"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRange_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRange_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_RegexChar_t">
    <PP>silver:definition:regex:RegexChar_t</PP>
    <Regex><CharacterSet invert="true"><SingleCharacter char="&#10;"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRegexChar_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRegexChar_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_ESC" grammar="host" /></InClasses>
    <Submits><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_RegexLBrack_t">
    <PP>silver:definition:regex:RegexLBrack_t</PP>
    <Regex><CharacterSet><SingleCharacter char="["/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRegexLBrack_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRegexLBrack_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_RegexLParen_t">
    <PP>silver:definition:regex:RegexLParen_t</PP>
    <Regex><CharacterSet><SingleCharacter char="("/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRegexLParen_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRegexLParen_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_RegexNot_t">
    <PP>silver:definition:regex:RegexNot_t</PP>
    <Regex><CharacterSet><SingleCharacter char="^"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRegexNot_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRegexNot_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_RegexRBrack_t">
    <PP>silver:definition:regex:RegexRBrack_t</PP>
    <Regex><CharacterSet><SingleCharacter char="]"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRegexRBrack_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRegexRBrack_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_RegexRParen_t">
    <PP>silver:definition:regex:RegexRParen_t</PP>
    <Regex><CharacterSet><SingleCharacter char=")"/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRegexRParen_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRegexRParen_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_regex_RegexWildcard_t">
    <PP>silver:definition:regex:RegexWildcard_t</PP>
    <Regex><CharacterSet><SingleCharacter char="."/></CharacterSet></Regex>
    <Type>silver.definition.regex.TRegexWildcard_t</Type>
    <Code><![CDATA[
RESULT = new silver.definition.regex.TRegexWildcard_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_regex_REGEX_OPER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_definition_type_syntax_Boolean_tkwd">
    <PP>silver:definition:type:syntax:Boolean_tkwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="B"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.type.syntax.TBoolean_tkwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.TBoolean_tkwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_TYPE" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_type_syntax_Decorated_tkwd">
    <PP>silver:definition:type:syntax:Decorated_tkwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="D"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.type.syntax.TDecorated_tkwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.TDecorated_tkwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_TYPE" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_type_syntax_Float_tkwd">
    <PP>silver:definition:type:syntax:Float_tkwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="F"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.type.syntax.TFloat_tkwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.TFloat_tkwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_TYPE" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_type_syntax_Integer_tkwd">
    <PP>silver:definition:type:syntax:Integer_tkwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="I"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.type.syntax.TInteger_tkwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.TInteger_tkwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_TYPE" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_definition_type_syntax_String_tkwd">
    <PP>silver:definition:type:syntax:String_tkwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="S"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>silver.definition.type.syntax.TString_tkwd</Type>
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.TString_tkwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_TYPE" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_Apply_kwd">
    <PP>silver:extension:bidirtransform:Apply_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TApply_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TApply_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_DblArrow_kwd">
    <PP>silver:extension:bidirtransform:DblArrow_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TDblArrow_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TDblArrow_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_From_kwd">
    <PP>silver:extension:bidirtransform:From_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TFrom_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TFrom_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_Nonterminals_kwd">
    <PP>silver:extension:bidirtransform:Nonterminals_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TNonterminals_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TNonterminals_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_Optional_kws">
    <PP>silver:extension:bidirtransform:Optional_kws</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TOptional_kws</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TOptional_kws(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_Origins_kwd">
    <PP>silver:extension:bidirtransform:Origins_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TOrigins_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TOrigins_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_RestoreArrow_t">
    <PP>silver:extension:bidirtransform:RestoreArrow_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="~"/></CharacterSet><CharacterSet><SingleCharacter char="~"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TRestoreArrow_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TRestoreArrow_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_Rewrite_kwd">
    <PP>silver:extension:bidirtransform:Rewrite_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TRewrite_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TRewrite_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_bidirtransform_Transform_kwd">
    <PP>silver:extension:bidirtransform:Transform_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.bidirtransform.TTransform_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.TTransform_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_convenience_Children_kwd">
    <PP>silver:extension:convenience:Children_kwd</PP>
    <Regex><CharacterSet><SingleCharacter char="$"/></CharacterSet></Regex>
    <Type>silver.extension.convenience.TChildren_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.convenience.TChildren_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_convenience_ProdVBar">
    <PP>silver:extension:convenience:ProdVBar</PP>
    <Regex><CharacterSet><SingleCharacter char="|"/></CharacterSet></Regex>
    <Type>silver.extension.convenience.TProdVBar</Type>
    <Code><![CDATA[
RESULT = new silver.extension.convenience.TProdVBar(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_convenience_Productions_kwd">
    <PP>silver:extension:convenience:Productions_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.convenience.TProductions_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.convenience.TProductions_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_deprecation_Build_kwd">
    <PP>silver:extension:deprecation:Build_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.deprecation.TBuild_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.TBuild_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_MODSTMT" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_deprecation_Deprecated_kwd">
    <PP>silver:extension:deprecation:Deprecated_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.deprecation.TDeprecated_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.TDeprecated_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_deprecation_Function_tkwd">
    <PP>silver:extension:deprecation:Function_tkwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="F"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.deprecation.TFunction_tkwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.TFunction_tkwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_TYPE" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_deprecation_IdTickTick_t">
    <PP>silver:extension:deprecation:IdTickTick_t</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><CharacterRange lower="0" upper="9"/><SingleCharacter char="_"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="'"/></CharacterSet><CharacterSet><SingleCharacter char="'"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.deprecation.TIdTickTick_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.TIdTickTick_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_deprecation_IdTick_t">
    <PP>silver:extension:deprecation:IdTick_t</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><CharacterRange lower="0" upper="9"/><SingleCharacter char="_"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="'"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.deprecation.TIdTick_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.TIdTick_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_deprecation_Production_tkwd">
    <PP>silver:extension:deprecation:Production_tkwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="P"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.deprecation.TProduction_tkwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.TProduction_tkwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_TYPE" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_Close_t">
    <PP>silver:extension:doc:core:Close_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="@"/></CharacterSet><CharacterSet><SingleCharacter char="}"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TClose_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TClose_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_CommentCloseSquare_t">
    <PP>silver:extension:doc:core:CommentCloseSquare_t</PP>
    <Regex><CharacterSet><SingleCharacter char="]"/></CharacterSet></Regex>
    <Type>silver.extension.doc.core.TCommentCloseSquare_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TCommentCloseSquare_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_CommentId_t">
    <PP>silver:extension:doc:core:CommentId_t</PP>
    <Regex><Concatenation><Concatenation><CharacterSet><CharacterRange lower="a" upper="z"/><CharacterRange lower="A" upper="Z"/><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="z"/><CharacterRange lower="A" upper="Z"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><KleeneStar><CharacterSet><CharacterRange lower="a" upper="z"/><CharacterRange lower="A" upper="Z"/><CharacterRange lower="0" upper="9"/><SingleCharacter char=":"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>silver.extension.doc.core.TCommentId_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TCommentId_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_CommentLink_t">
    <PP>silver:extension:doc:core:CommentLink_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="@"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TCommentLink_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TCommentLink_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_CommentOpenSquare_t">
    <PP>silver:extension:doc:core:CommentOpenSquare_t</PP>
    <Regex><CharacterSet><SingleCharacter char="["/></CharacterSet></Regex>
    <Type>silver.extension.doc.core.TCommentOpenSquare_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TCommentOpenSquare_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_CommentOpen_t">
    <PP>silver:extension:doc:core:CommentOpen_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="{"/></CharacterSet><CharacterSet><SingleCharacter char="@"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TCommentOpen_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TCommentOpen_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_CommentText_t">
    <PP>silver:extension:doc:core:CommentText_t</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="a" upper="z"/><CharacterRange lower="A" upper="Z"/><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="@"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>silver.extension.doc.core.TCommentText_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TCommentText_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_ConfigHeader_t">
    <PP>silver:extension:doc:core:ConfigHeader_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TConfigHeader_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TConfigHeader_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_ConfigNoDoc_t">
    <PP>silver:extension:doc:core:ConfigNoDoc_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TConfigNoDoc_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TConfigNoDoc_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_ConfigOpen_t">
    <PP>silver:extension:doc:core:ConfigOpen_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="{"/></CharacterSet><CharacterSet><SingleCharacter char="@"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TConfigOpen_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TConfigOpen_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_ConfigSplitFiles_t">
    <PP>silver:extension:doc:core:ConfigSplitFiles_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TConfigSplitFiles_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TConfigSplitFiles_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_ConfigValue_t">
    <PP>silver:extension:doc:core:ConfigValue_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="&quot;"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TConfigValue_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TConfigValue_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_doc_core_NoDclComment_t">
    <PP>silver:extension:doc:core:NoDclComment_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="{"/></CharacterSet><CharacterSet><SingleCharacter char="@"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char=" "/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="@"/></CharacterSet><CharacterSet><SingleCharacter char="}"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.doc.core.TNoDclComment_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.TNoDclComment_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_extension_doc_core_DOC" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_easyterminal_Terminal_t">
    <PP>silver:extension:easyterminal:Terminal_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="'"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="'"/><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="'"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.easyterminal.TTerminal_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.TTerminal_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_functorattrib_Functor_kwd">
    <PP>silver:extension:functorattrib:Functor_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.functorattrib.TFunctor_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.functorattrib.TFunctor_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_functorattrib_Propagate_kwd">
    <PP>silver:extension:functorattrib:Propagate_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.functorattrib.TPropagate_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.functorattrib.TPropagate_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_list_LSqr_t">
    <PP>silver:extension:list:LSqr_t</PP>
    <Regex><CharacterSet><SingleCharacter char="["/></CharacterSet></Regex>
    <Type>silver.extension.list.TLSqr_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.list.TLSqr_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_list_RSqr_t">
    <PP>silver:extension:list:RSqr_t</PP>
    <Regex><CharacterSet><SingleCharacter char="]"/></CharacterSet></Regex>
    <Type>silver.extension.list.TRSqr_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.list.TRSqr_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_monad_Bind_kwd">
    <PP>silver:extension:monad:Bind_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>2</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.extension.monad.TBind_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.monad.TBind_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_monad_Do_kwd">
    <PP>silver:extension:monad:Do_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.monad.TDo_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.monad.TDo_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_monad_LArrow_t">
    <PP>silver:extension:monad:LArrow_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.monad.TLArrow_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.monad.TLArrow_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_monad_NoElse_t">
    <PP>silver:extension:monad:NoElse_t</PP>
    <Regex><EmptyString/></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>0</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>silver.extension.monad.TNoElse_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.monad.TNoElse_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_monad_Sequence_t">
    <PP>silver:extension:monad:Sequence_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>2</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>silver.extension.monad.TSequence_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.monad.TSequence_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_patternmatching_Arrow_kwd">
    <PP>silver:extension:patternmatching:Arrow_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.patternmatching.TArrow_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.TArrow_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_patternmatching_Case_kwd">
    <PP>silver:extension:patternmatching:Case_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.patternmatching.TCase_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.TCase_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_patternmatching_Of_kwd">
    <PP>silver:extension:patternmatching:Of_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.patternmatching.TOf_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.TOf_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_extension_patternmatching_Opt_Vbar_t">
    <PP>silver:extension:patternmatching:Opt_Vbar_t</PP>
    <Regex><Choice><CharacterSet><SingleCharacter char="|"/></CharacterSet><EmptyString/></Choice></Regex>
    <Type>silver.extension.patternmatching.TOpt_Vbar_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.TOpt_Vbar_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_patternmatching_Vbar_kwd">
    <PP>silver:extension:patternmatching:Vbar_kwd</PP>
    <Regex><CharacterSet><SingleCharacter char="|"/></CharacterSet></Regex>
    <Type>silver.extension.patternmatching.TVbar_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.TVbar_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_PPTemplate_kwd">
    <PP>silver:extension:templating:PPTemplate_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.templating.TPPTemplate_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.TPPTemplate_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_SLPPTemplate_kwd">
    <PP>silver:extension:templating:SLPPTemplate_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.templating.TSLPPTemplate_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.TSLPPTemplate_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_SLTemplate_kwd">
    <PP>silver:extension:templating:SLTemplate_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.templating.TSLTemplate_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.TSLTemplate_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_Template_kwd">
    <PP>silver:extension:templating:Template_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.templating.TTemplate_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.TTemplate_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_DoubleDollar">
    <PP>silver:extension:templating:syntax:DoubleDollar</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="$"/></CharacterSet><CharacterSet><SingleCharacter char="$"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.templating.syntax.TDoubleDollar</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TDoubleDollar(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_LiteralBackslash">
    <PP>silver:extension:templating:syntax:LiteralBackslash</PP>
    <Regex><CharacterSet><SingleCharacter char="\"/></CharacterSet></Regex>
    <Type>silver.extension.templating.syntax.TLiteralBackslash</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TLiteralBackslash(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_LiteralNewline">
    <PP>silver:extension:templating:syntax:LiteralNewline</PP>
    <Regex><Choice><CharacterSet><SingleCharacter char="&#10;"/></CharacterSet><Concatenation><CharacterSet><SingleCharacter char="&#13;"/></CharacterSet><CharacterSet><SingleCharacter char="&#10;"/></CharacterSet></Concatenation></Choice></Regex>
    <Type>silver.extension.templating.syntax.TLiteralNewline</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TLiteralNewline(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_LiteralQuote">
    <PP>silver:extension:templating:syntax:LiteralQuote</PP>
    <Regex><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Regex>
    <Type>silver.extension.templating.syntax.TLiteralQuote</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TLiteralQuote(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_LiteralTab">
    <PP>silver:extension:templating:syntax:LiteralTab</PP>
    <Regex><CharacterSet><SingleCharacter char="&#9;"/></CharacterSet></Regex>
    <Type>silver.extension.templating.syntax.TLiteralTab</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TLiteralTab(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_OpenEscape">
    <PP>silver:extension:templating:syntax:OpenEscape</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="$"/></CharacterSet><CharacterSet><SingleCharacter char="{"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.templating.syntax.TOpenEscape</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TOpenEscape(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_QuoteWater">
    <PP>silver:extension:templating:syntax:QuoteWater</PP>
    <Regex><Concatenation><CharacterSet invert="true"><SingleCharacter char="$"/><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char="&quot;"/><SingleCharacter char="\"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="$"/><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char="&quot;"/><SingleCharacter char="\"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>silver.extension.templating.syntax.TQuoteWater</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TQuoteWater(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_SingleLineQuoteWater">
    <PP>silver:extension:templating:syntax:SingleLineQuoteWater</PP>
    <Regex><Concatenation><Choice><CharacterSet invert="true"><SingleCharacter char="$"/><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char="&quot;"/><SingleCharacter char="\"/></CharacterSet><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="\"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Choice><KleeneStar><Choice><CharacterSet invert="true"><SingleCharacter char="$"/><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char="&quot;"/><SingleCharacter char="\"/></CharacterSet><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="\"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Choice></KleeneStar></Concatenation></Regex>
    <Type>silver.extension.templating.syntax.TSingleLineQuoteWater</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TSingleLineQuoteWater(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_templating_syntax_TripleQuote">
    <PP>silver:extension:templating:syntax:TripleQuote</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.templating.syntax.TTripleQuote</Type>
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.TTripleQuote(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_LITERAL" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_testing_EqualityTest_t">
    <PP>silver:extension:testing:EqualityTest_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="q"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="T"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.testing.TEqualityTest_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.testing.TEqualityTest_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_testing_MainTestSuite_t">
    <PP>silver:extension:testing:MainTestSuite_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="T"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="S"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.testing.TMainTestSuite_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.testing.TMainTestSuite_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_testing_MakeTestSuite_t">
    <PP>silver:extension:testing:MakeTestSuite_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="T"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="S"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.testing.TMakeTestSuite_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.testing.TMakeTestSuite_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_testing_WrongCode_kwd">
    <PP>silver:extension:testing:WrongCode_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="C"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.testing.TWrongCode_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.testing.TWrongCode_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_testing_WrongFlowCode_kwd">
    <PP>silver:extension:testing:WrongFlowCode_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="F"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="C"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.testing.TWrongFlowCode_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.extension.testing.TWrongFlowCode_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_treegen_Arbitrary_t">
    <PP>silver:extension:treegen:Arbitrary_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="A"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.treegen.TArbitrary_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.treegen.TArbitrary_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_treegen_Derive_t">
    <PP>silver:extension:treegen:Derive_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.treegen.TDerive_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.treegen.TDerive_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_treegen_Eq_t">
    <PP>silver:extension:treegen:Eq_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="E"/></CharacterSet><CharacterSet><SingleCharacter char="q"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.treegen.TEq_t</Type>
    <Code><![CDATA[
RESULT = new silver.extension.treegen.TEq_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_extension_treegen_TestFor_T">
    <PP>silver:extension:treegen:TestFor_T</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="F"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.extension.treegen.TTestFor_T</Type>
    <Code><![CDATA[
RESULT = new silver.extension.treegen.TTestFor_T(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_autocopyattr_AutoCopy_kwd">
    <PP>silver:modification:autocopyattr:AutoCopy_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.autocopyattr.TAutoCopy_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.autocopyattr.TAutoCopy_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_collection_BaseContains_t">
    <PP>silver:modification:collection:BaseContains_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char=":"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.collection.TBaseContains_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.collection.TBaseContains_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_collection_Contains_t">
    <PP>silver:modification:collection:Contains_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.collection.TContains_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.collection.TContains_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Action_kwd">
    <PP>silver:modification:copper:Action_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TAction_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TAction_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Class_kwd">
    <PP>silver:modification:copper:Class_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TClass_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TClass_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Classes_kwd">
    <PP>silver:modification:copper:Classes_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TClasses_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TClasses_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Disambiguation_kwd">
    <PP>silver:modification:copper:Disambiguation_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TDisambiguation_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TDisambiguation_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Dominates_t">
    <PP>silver:modification:copper:Dominates_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TDominates_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TDominates_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Layout_kwd">
    <PP>silver:modification:copper:Layout_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TLayout_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TLayout_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Lexer_kwd">
    <PP>silver:modification:copper:Lexer_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TLexer_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TLexer_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Over_t">
    <PP>silver:modification:copper:Over_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TOver_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TOver_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Parser_kwd">
    <PP>silver:modification:copper:Parser_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TParser_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TParser_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Pluck_kwd">
    <PP>silver:modification:copper:Pluck_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TPluck_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TPluck_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Prefer_t">
    <PP>silver:modification:copper:Prefer_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TPrefer_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TPrefer_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Prefix_t">
    <PP>silver:modification:copper:Prefix_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TPrefix_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TPrefix_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Print_kwd">
    <PP>silver:modification:copper:Print_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TPrint_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TPrint_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_PushToken_kwd">
    <PP>silver:modification:copper:PushToken_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="T"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TPushToken_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TPushToken_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Separator_kwd">
    <PP>silver:modification:copper:Separator_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TSeparator_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TSeparator_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_Submits_t">
    <PP>silver:modification:copper:Submits_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper.TSubmits_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper.TSubmits_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_copper_mda_CopperMDA">
    <PP>silver:modification:copper_mda:CopperMDA</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.copper_mda.TCopperMDA</Type>
    <Code><![CDATA[
RESULT = new silver.modification.copper_mda.TCopperMDA(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_ffi_FFI_kwd">
    <PP>silver:modification:ffi:FFI_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.ffi.TFFI_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.ffi.TFFI_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_Bold_kwd">
    <PP>silver:modification:impide:Bold_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TBold_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TBold_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_Color_kwd">
    <PP>silver:modification:impide:Color_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TColor_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TColor_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_Font_kwd">
    <PP>silver:modification:impide:Font_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TFont_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TFont_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpFont_t">
    <PP>silver:modification:impide:ImpFont_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpFont_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpFont_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_IdeResource">
    <PP>silver:modification:impide:ImpIde_IdeResource</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_IdeResource</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_IdeResource(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_OptFunc_Builder">
    <PP>silver:modification:impide:ImpIde_OptFunc_Builder</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_OptFunc_Builder</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_OptFunc_Builder(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_OptFunc_Exporter">
    <PP>silver:modification:impide:ImpIde_OptFunc_Exporter</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_OptFunc_Exporter</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_OptFunc_Exporter(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_OptFunc_Folder">
    <PP>silver:modification:impide:ImpIde_OptFunc_Folder</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_OptFunc_Folder</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_OptFunc_Folder(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_OptFunc_PostBuilder">
    <PP>silver:modification:impide:ImpIde_OptFunc_PostBuilder</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_OptFunc_PostBuilder</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_OptFunc_PostBuilder(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_OptFunc_Property">
    <PP>silver:modification:impide:ImpIde_OptFunc_Property</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_OptFunc_Property</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_OptFunc_Property(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_ProdInfo_Name_t">
    <PP>silver:modification:impide:ImpIde_ProdInfo_Name_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_ProdInfo_Name_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_ProdInfo_Name_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_ProdInfo_Version_t">
    <PP>silver:modification:impide:ImpIde_ProdInfo_Version_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_ProdInfo_Version_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_ProdInfo_Version_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_PropOption_Default_t">
    <PP>silver:modification:impide:ImpIde_PropOption_Default_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_PropOption_Default_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_PropOption_Default_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_PropOption_Display_t">
    <PP>silver:modification:impide:ImpIde_PropOption_Display_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_PropOption_Display_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_PropOption_Display_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_PropOption_Required_t">
    <PP>silver:modification:impide:ImpIde_PropOption_Required_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="q"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_PropOption_Required_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_PropOption_Required_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_PropType_integer_t">
    <PP>silver:modification:impide:ImpIde_PropType_integer_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_PropType_integer_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_PropType_integer_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_PropType_path_t">
    <PP>silver:modification:impide:ImpIde_PropType_path_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_PropType_path_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_PropType_path_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_PropType_string_t">
    <PP>silver:modification:impide:ImpIde_PropType_string_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_PropType_string_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_PropType_string_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_PropType_url_t">
    <PP>silver:modification:impide:ImpIde_PropType_url_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_PropType_url_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_PropType_url_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_Wizard">
    <PP>silver:modification:impide:ImpIde_Wizard</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="z"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_Wizard</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_Wizard(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_Wizard_NewFile">
    <PP>silver:modification:impide:ImpIde_Wizard_NewFile</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char=" "/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_Wizard_NewFile</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_Wizard_NewFile(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_Wizard_StubGen">
    <PP>silver:modification:impide:ImpIde_Wizard_StubGen</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char=" "/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_Wizard_StubGen</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_Wizard_StubGen(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_ImpIde_t">
    <PP>silver:modification:impide:ImpIde_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TImpIde_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TImpIde_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_impide_Italic_kwd">
    <PP>silver:modification:impide:Italic_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.impide.TItalic_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.impide.TItalic_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_lambda_fn_Arrow_t">
    <PP>silver:modification:lambda_fn:Arrow_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>0</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>silver.modification.lambda_fn.TArrow_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.lambda_fn.TArrow_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_SPECOP" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="silver_modification_lambda_fn_Lambda_kwd">
    <PP>silver:modification:lambda_fn:Lambda_kwd</PP>
    <Regex><CharacterSet><SingleCharacter char="\"/></CharacterSet></Regex>
    <Type>silver.modification.lambda_fn.TLambda_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.lambda_fn.TLambda_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_let_fix_End_kwd">
    <PP>silver:modification:let_fix:End_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.let_fix.TEnd_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.let_fix.TEnd_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_let_fix_In_kwd">
    <PP>silver:modification:let_fix:In_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.let_fix.TIn_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.let_fix.TIn_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_let_fix_Let_kwd">
    <PP>silver:modification:let_fix:Let_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.let_fix.TLet_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.let_fix.TLet_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_primitivepattern_Match_kwd">
    <PP>silver:modification:primitivepattern:Match_kwd</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.primitivepattern.TMatch_kwd</Type>
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.TMatch_kwd(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /><TerminalClassRef id="silver_definition_core_RESERVED" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates><TerminalClassRef id="silver_definition_core_IDENTIFIER" grammar="host" /></Dominates>
  </Terminal>
  <Terminal id="silver_modification_typedecl_Type_t">
    <PP>silver:modification:typedecl:Type_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>silver.modification.typedecl.TType_t</Type>
    <Code><![CDATA[
RESULT = new silver.modification.typedecl.TType_t(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  tokenList.add(RESULT);
]]></Code>
    <InClasses><TerminalClassRef id="silver_definition_core_KEYWORD" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <DisambiguationFunction id="silver_host___disam18">
    <Members><TerminalRef id="silver_definition_regex_RegexChar_t" grammar="host" /><TerminalRef id="silver_definition_core_Divide_t" grammar="host" /></Members>
    <Code><![CDATA[
return (Integer)silver_definition_core_Divide_t;
]]></Code>
  </DisambiguationFunction>
  <DisambiguationFunction id="silver_host___disam24">
    <Members><TerminalRef id="silver_definition_regex_RegexChar_t" grammar="host" /><TerminalRef id="silver_definition_core_WhiteSpace" grammar="host" /></Members>
    <Code><![CDATA[
return (Integer)silver_definition_core_WhiteSpace;
]]></Code>
  </DisambiguationFunction>

  <Nonterminal id="silver_definition_concrete_syntax_ProductionModifier">
    <PP>silver:definition:concrete_syntax:ProductionModifier</PP>
    <Type><![CDATA[silver.definition.concrete_syntax.NProductionModifier]]></Type>
  </Nonterminal>
  <Production id="silver_definition_concrete_syntax_productionModifierOperator">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PproductionModifierOperator(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_concrete_syntax_Operator_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_productionModifierPrecedence">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PproductionModifierPrecedence(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_concrete_syntax_Precedence_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><TerminalRef id="silver_definition_core_Int_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_productionModifierLayoutNone">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PproductionModifierLayoutNone(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Layout_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_productionModifierLayout">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PproductionModifierLayout(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Layout_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_concrete_syntax_ProductionModifierList">
    <PP>silver:definition:concrete_syntax:ProductionModifierList</PP>
    <Type><![CDATA[silver.definition.concrete_syntax.NProductionModifierList]]></Type>
  </Nonterminal>
  <Production id="silver_definition_concrete_syntax_productionModifiersCons">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PproductionModifiersCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifierList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifier" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifierList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_productionModifierSingle">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PproductionModifierSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifierList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifier" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_concrete_syntax_ProductionModifiers">
    <PP>silver:definition:concrete_syntax:ProductionModifiers</PP>
    <Type><![CDATA[silver.definition.concrete_syntax.NProductionModifiers]]></Type>
  </Nonterminal>
  <Production id="silver_definition_concrete_syntax_productionModifierSome">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PproductionModifierSome(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifiers" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifierList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_productionModifiersNone">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PproductionModifiersNone(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifiers" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_concrete_syntax_RegExpr">
    <PP>silver:definition:concrete_syntax:RegExpr</PP>
    <Type><![CDATA[silver.definition.concrete_syntax.NRegExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_concrete_syntax_regExpr">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PregExpr(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_RegExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Divide_t" grammar="host" /><NonterminalRef id="silver_definition_regex_Regex" grammar="host" /><TerminalRef id="silver_definition_core_Divide_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_easyterminal_regExprEasyTerm">
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.PregExprEasyTerm(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_RegExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_easyterminal_Terminal_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_concrete_syntax_TerminalKeywordModifier">
    <PP>silver:definition:concrete_syntax:TerminalKeywordModifier</PP>
    <Type><![CDATA[silver.definition.concrete_syntax.NTerminalKeywordModifier]]></Type>
  </Nonterminal>
  <Production id="silver_definition_concrete_syntax_terminalKeywordModifierNone">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalKeywordModifierNone(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalKeywordModifier" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_terminalKeywordModifierMarking">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalKeywordModifierMarking(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalKeywordModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_concrete_syntax_Marking_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_terminalKeywordModifierIgnore">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalKeywordModifierIgnore(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalKeywordModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_concrete_syntax_Ignore_kwd" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_concrete_syntax_TerminalModifier">
    <PP>silver:definition:concrete_syntax:TerminalModifier</PP>
    <Type><![CDATA[silver.definition.concrete_syntax.NTerminalModifier]]></Type>
  </Nonterminal>
  <Production id="silver_definition_concrete_syntax_terminalModifierPrecedence">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalModifierPrecedence(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_concrete_syntax_Precedence_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><TerminalRef id="silver_definition_core_Int_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_terminalModifierRight">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalModifierRight(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_concrete_syntax_Association_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><TerminalRef id="silver_definition_concrete_syntax_Right_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_terminalModifierLeft">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalModifierLeft(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_concrete_syntax_Association_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><TerminalRef id="silver_definition_concrete_syntax_Left_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_terminalModifierFont">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PterminalModifierFont(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_Font_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_terminalModifierActionCode">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PterminalModifierActionCode(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Action_kwd" grammar="host" /><NonterminalRef id="silver_modification_copper_ActionCode_c" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_terminalModifierClassSpec">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PterminalModifierClassSpec(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Lexer_kwd" grammar="host" /><TerminalRef id="silver_modification_copper_Classes_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_copper_ClassList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_terminalModifierSubmitsTo">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PterminalModifierSubmitsTo(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Submits_t" grammar="host" /><TerminalRef id="silver_definition_core_To_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_terminalModifierDominates">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PterminalModifierDominates(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Dominates_t" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_concrete_syntax_TerminalModifiers">
    <PP>silver:definition:concrete_syntax:TerminalModifiers</PP>
    <Type><![CDATA[silver.definition.concrete_syntax.NTerminalModifiers]]></Type>
  </Nonterminal>
  <Production id="silver_definition_concrete_syntax_terminalModifiersCons">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalModifiersCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifiers" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifiers" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_terminalModifierSingle">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalModifierSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifiers" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifier" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AGDcl">
    <PP>silver:definition:core:AGDcl</PP>
    <Type><![CDATA[silver.definition.core.NAGDcl]]></Type>
  </Nonterminal>
  <Production id="silver_modification_autocopyattr_convenience_attributeDclAutoMultiple">
    <Code><![CDATA[
RESULT = new silver.modification.autocopyattr.convenience.PattributeDclAutoMultiple(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_autocopyattr_AutoCopy_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocAttributionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocAttributionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docAttributionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocAttributionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocAnnotationDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocAnnotationDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docAnnotationDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocAnnotationDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocGlobalValueDclConcrete">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocGlobalValueDclConcrete(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Global_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docGlobalValueDclConcrete">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocGlobalValueDclConcrete(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Global_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocFunctionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocFunctionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Function_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_FunctionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docFunctionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocFunctionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Function_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_FunctionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocNonterminalWithDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocNonterminalWithDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /><TerminalRef id="silver_definition_core_NonTerminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docNonterminalWithDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocNonterminalWithDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /><TerminalRef id="silver_definition_core_NonTerminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocNonterminalDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocNonterminalDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /><TerminalRef id="silver_definition_core_NonTerminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docNonterminalDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocNonterminalDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /><TerminalRef id="silver_definition_core_NonTerminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocConcreteProductionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocConcreteProductionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Concrete_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifiers" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docConcreteProductionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocConcreteProductionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Concrete_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifiers" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocProductionDecl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocProductionDecl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Abstract_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docProductionDecl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocProductionDecl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Abstract_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_config">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.Pconfig(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_ConfigOpen_t" grammar="host" /><NonterminalRef id="silver_extension_doc_core_DocConfigs" grammar="host" /><TerminalRef id="silver_extension_doc_core_Close_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocAspectFunctionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocAspectFunctionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Aspect_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Function_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_core_AspectFunctionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docAspectFunctionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocAspectFunctionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Aspect_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Function_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_core_AspectFunctionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_noDocAspectProductionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocAspectProductionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_NoDclComment_t" grammar="host" /><TerminalRef id="silver_definition_core_Aspect_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_core_AspectProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_docAspectProductionDcl">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdocAspectProductionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /><TerminalRef id="silver_definition_core_Aspect_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_core_AspectProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_flowtypeAttrDcl">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PflowtypeAttrDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_flow_syntax_Flowtype" grammar="host" /><NonterminalRef id="silver_definition_flow_syntax_FlowSpec" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_definition_flow_syntax_NtList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_flowtypeDcl">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PflowtypeDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_flow_syntax_Flowtype" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_flow_syntax_FlowSpecs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_terminalDclAllModifiers">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalDclAllModifiers(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalKeywordModifier" grammar="host" /><TerminalRef id="silver_definition_core_Terminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_RegExpr" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifiers" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_terminalDclKwdModifiers">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PterminalDclKwdModifiers(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_TerminalKeywordModifier" grammar="host" /><TerminalRef id="silver_definition_core_Terminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_RegExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_concrete_syntax_concreteProductionDcl">
    <Code><![CDATA[
RESULT = new silver.definition.concrete_syntax.PconcreteProductionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Concrete_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifiers" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_annotateDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PannotateDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_attributionDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PattributionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_annotationDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PannotationDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_globalValueDclConcrete">
    <Code><![CDATA[
RESULT = new silver.definition.core.PglobalValueDclConcrete(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Global_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_functionDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PfunctionDcl(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Function_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_FunctionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_nonterminalDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnonterminalDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /><TerminalRef id="silver_definition_core_NonTerminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_productionDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Abstract_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_attributeDclSyn">
    <Code><![CDATA[
RESULT = new silver.definition.core.PattributeDclSyn(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Synthesized_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_attributeDclInh">
    <Code><![CDATA[
RESULT = new silver.definition.core.PattributeDclInh(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Inherited_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_aspectFunctionDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectFunctionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Aspect_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Function_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_core_AspectFunctionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_aspectProductionDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectProductionDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Aspect_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_core_AspectProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_fontDecl">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PfontDecl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], _children[10], _children[11], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpFont_t" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_modification_impide_Color_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><TerminalRef id="silver_definition_core_Int_t" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><TerminalRef id="silver_definition_core_Int_t" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><TerminalRef id="silver_definition_core_Int_t" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /><NonterminalRef id="silver_modification_impide_FontStyles" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_ideDcl">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PideDcl(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><NonterminalRef id="silver_modification_impide_IdeStmts" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_mda_copperMdaDcl">
    <Code><![CDATA[
RESULT = new silver.modification.copper_mda.PcopperMdaDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_mda_CopperMDA" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_copper_ParserComponents" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_defaultattr_aspectDefaultProduction">
    <Code><![CDATA[
RESULT = new silver.modification.defaultattr.PaspectDefaultProduction(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Aspect_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Default_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_CCEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_prefixSeparatorAGDcl">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PprefixSeparatorAGDcl(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Prefix_t" grammar="host" /><TerminalRef id="silver_modification_copper_Separator_kwd" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_lexerClassDecl">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassDecl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Lexer_kwd" grammar="host" /><TerminalRef id="silver_modification_copper_Class_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_modification_copper_LexerClassModifiers" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_lexerClassDclEmpty">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassDclEmpty(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Lexer_kwd" grammar="host" /><TerminalRef id="silver_modification_copper_Class_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_disambiguationGroupDcl">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PdisambiguationGroupDcl(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Disambiguation_kwd" grammar="host" /><NonterminalRef id="silver_modification_copper_TermList" grammar="host" /><NonterminalRef id="silver_modification_copper_ActionCode_c" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_attributeDclParser">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PattributeDclParser(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Parser_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_modification_copper_Action_kwd" grammar="host" /><NonterminalRef id="silver_modification_copper_ActionCode_c" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_parserDcl">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PparserDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Parser_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_copper_ParserComponents" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_concreteProductionDclAction">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PconcreteProductionDclAction(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Concrete_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifiers" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /><TerminalRef id="silver_modification_copper_Action_kwd" grammar="host" /><NonterminalRef id="silver_modification_copper_ActionCode_c" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_typedecl_typeDecl">
    <Code><![CDATA[
RESULT = new silver.modification.typedecl.PtypeDecl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_typedecl_Type_t" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_ffi_functionDclFFI">
    <Code><![CDATA[
RESULT = new silver.modification.ffi.PfunctionDclFFI(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Function_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_core_FunctionSignature" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /><TerminalRef id="silver_modification_ffi_FFI_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_ffi_FFIDefs" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_ffi_ffiTypeDcl">
    <Code><![CDATA[
RESULT = new silver.modification.ffi.PffiTypeDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_typedecl_Type_t" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_modification_ffi_FFI_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_autocopyattr_attributeDclAuto">
    <Code><![CDATA[
RESULT = new silver.modification.autocopyattr.PattributeDclAuto(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_autocopyattr_AutoCopy_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_collectionAttributeDclInh">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PcollectionAttributeDclInh(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Inherited_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_modification_collection_NameOrBOperator" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_collectionAttributeDclSyn">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PcollectionAttributeDclSyn(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Synthesized_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_modification_collection_NameOrBOperator" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_cncOriginDcl">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PcncOriginDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Apply_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Concrete_kwd" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_Origins_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_originDcl">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PoriginDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Apply_kwd" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_Origins_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_nonterminalGroup">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PnonterminalGroup(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Nonterminals_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_optOriginAttributeDclPrefix">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PoptOriginAttributeDclPrefix(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Optional_kws" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_Origins_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_QNameList" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><TerminalRef id="silver_modification_copper_Prefix_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_optOriginAttributeDcl">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PoptOriginAttributeDcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Optional_kws" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_Origins_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_QNameList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_originAttributeDcl">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PoriginAttributeDcl(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Origins_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_QNameList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_treegen_deriveagdcl">
    <Code><![CDATA[
RESULT = new silver.extension.treegen.Pderiveagdcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_treegen_Derive_t" grammar="host" /><TerminalRef id="silver_extension_treegen_Arbitrary_t" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_treegen_testforagdcl">
    <Code><![CDATA[
RESULT = new silver.extension.treegen.Ptestforagdcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_treegen_TestFor_T" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_Colon_t" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_treegen_deriveEqagdcl">
    <Code><![CDATA[
RESULT = new silver.extension.treegen.PderiveEqagdcl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_treegen_Derive_t" grammar="host" /><TerminalRef id="silver_extension_treegen_Eq_t" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_testing_wrongFlowDecl">
    <Code><![CDATA[
RESULT = new silver.extension.testing.PwrongFlowDecl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_testing_WrongFlowCode_kwd" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_testing_wrongDecl">
    <Code><![CDATA[
RESULT = new silver.extension.testing.PwrongDecl(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_testing_WrongCode_kwd" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_testing_equalityTest2_p">
    <Code><![CDATA[
RESULT = new silver.extension.testing.PequalityTest2_p(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], _children[10], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_testing_EqualityTest_t" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_testing_mainTestSuite_p">
    <Code><![CDATA[
RESULT = new silver.extension.testing.PmainTestSuite_p(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_testing_MainTestSuite_t" grammar="host" /><TerminalRef id="silver_definition_core_IdLower_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_testing_makeTestSuite_p">
    <Code><![CDATA[
RESULT = new silver.extension.testing.PmakeTestSuite_p(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_testing_MakeTestSuite_t" grammar="host" /><TerminalRef id="silver_definition_core_IdLower_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_deprecation_deprecatedDecl">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PdeprecatedDecl(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_deprecation_Deprecated_kwd" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_productionDclC">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PproductionDclC(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Concrete_kwd" grammar="host" /><TerminalRef id="silver_extension_convenience_Productions_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionLHS" grammar="host" /><NonterminalRef id="silver_extension_convenience_ProductionDclStmts" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_attributeDclSynMultiple">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PattributeDclSynMultiple(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Synthesized_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_attributeDclInhMultiple">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PattributeDclInhMultiple(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Inherited_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_nonterminalWithDcl">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PnonterminalWithDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /><TerminalRef id="silver_definition_core_NonTerminal_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_multipleAnnotationDclsManySingle">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PmultipleAnnotationDclsManySingle(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_multipleAnnotationDclsSingleMany">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PmultipleAnnotationDclsSingleMany(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_multipleAnnotationDclsManyMany">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PmultipleAnnotationDclsManyMany(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_multipleAttributionDclsManySingle">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PmultipleAttributionDclsManySingle(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_multipleAttributionDclsSingleMany">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PmultipleAttributionDclsSingleMany(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_multipleAttributionDclsManyMany">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PmultipleAttributionDclsManyMany(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Occurs_kwd" grammar="host" /><TerminalRef id="silver_definition_core_On_kwd" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AGDcls">
    <PP>silver:definition:core:AGDcls</PP>
    <Type><![CDATA[silver.definition.core.NAGDcls]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_consAGDcls">
    <Code><![CDATA[
RESULT = new silver.definition.core.PconsAGDcls(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AGDcl" grammar="host" /><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_nilAGDcls">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnilAGDcls(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_transformAGDclFull">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PtransformAGDclFull(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], _children[10], _children[11], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Transform_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_TransformList" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_Rewrite_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_RewriteRuleList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_From_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /><TerminalRef id="silver_definition_core_To_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_DblArrow_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AnnoAppExprs">
    <PP>silver:definition:core:AnnoAppExprs</PP>
    <Type><![CDATA[silver.definition.core.NAnnoAppExprs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_oneAnnoAppExprs">
    <Code><![CDATA[
RESULT = new silver.definition.core.PoneAnnoAppExprs(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AnnoAppExprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AnnoExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_snocAnnoAppExprs">
    <Code><![CDATA[
RESULT = new silver.definition.core.PsnocAnnoAppExprs(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AnnoAppExprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AnnoAppExprs" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_AnnoExpr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AnnoExpr">
    <PP>silver:definition:core:AnnoExpr</PP>
    <Type><![CDATA[silver.definition.core.NAnnoExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_annoExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PannoExpr(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AnnoExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_AppExpr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AppExpr">
    <PP>silver:definition:core:AppExpr</PP>
    <Type><![CDATA[silver.definition.core.NAppExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_presentAppExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PpresentAppExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AppExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_missingAppExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmissingAppExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AppExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_UnderScore_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AppExprs">
    <PP>silver:definition:core:AppExprs</PP>
    <Type><![CDATA[silver.definition.core.NAppExprs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_oneAppExprs">
    <Code><![CDATA[
RESULT = new silver.definition.core.PoneAppExprs(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AppExprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AppExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_snocAppExprs">
    <Code><![CDATA[
RESULT = new silver.definition.core.PsnocAppExprs(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AppExprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AppExprs" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_AppExpr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AspectFunctionLHS">
    <PP>silver:definition:core:AspectFunctionLHS</PP>
    <Type><![CDATA[silver.definition.core.NAspectFunctionLHS]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_functionLHSType">
    <Code><![CDATA[
RESULT = new silver.definition.core.PfunctionLHSType(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectFunctionLHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AspectFunctionSignature">
    <PP>silver:definition:core:AspectFunctionSignature</PP>
    <Type><![CDATA[silver.definition.core.NAspectFunctionSignature]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_aspectFunctionSignature">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectFunctionSignature(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectFunctionSignature" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AspectFunctionLHS" grammar="host" /><TerminalRef id="silver_definition_core_CCEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_AspectRHS" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AspectProductionLHS">
    <PP>silver:definition:core:AspectProductionLHS</PP>
    <Type><![CDATA[silver.definition.core.NAspectProductionLHS]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_aspectProductionLHSTyped">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectProductionLHSTyped(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectProductionLHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_aspectProductionLHSId">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectProductionLHSId(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectProductionLHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_aspectProductionLHSNone">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectProductionLHSNone(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectProductionLHS" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_UnderScore_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AspectProductionSignature">
    <PP>silver:definition:core:AspectProductionSignature</PP>
    <Type><![CDATA[silver.definition.core.NAspectProductionSignature]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_aspectProductionSignature">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectProductionSignature(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectProductionSignature" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AspectProductionLHS" grammar="host" /><TerminalRef id="silver_definition_core_CCEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_AspectRHS" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AspectRHS">
    <PP>silver:definition:core:AspectRHS</PP>
    <Type><![CDATA[silver.definition.core.NAspectRHS]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_aspectRHSElemCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectRHSElemCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectRHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_AspectRHSElem" grammar="host" /><NonterminalRef id="silver_definition_core_AspectRHS" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_aspectRHSElemNil">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectRHSElemNil(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectRHS" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_AspectRHSElem">
    <PP>silver:definition:core:AspectRHSElem</PP>
    <Type><![CDATA[silver.definition.core.NAspectRHSElem]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_aspectRHSElemTyped">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectRHSElemTyped(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_aspectRHSElemId">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectRHSElemId(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_aspectRHSElemNone">
    <Code><![CDATA[
RESULT = new silver.definition.core.PaspectRHSElemNone(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectRHSElem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_UnderScore_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_easyterminal_aspectRHSElemTypedEasyReg">
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.PaspectRHSElemTypedEasyReg(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_extension_easyterminal_EasyTerminalRef" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_easyterminal_aspectRHSElemEasyReg">
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.PaspectRHSElemEasyReg(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_AspectRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_easyterminal_EasyTerminalRef" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ClosedOrNot">
    <PP>silver:definition:core:ClosedOrNot</PP>
    <Type><![CDATA[silver.definition.core.NClosedOrNot]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_closedNt">
    <Code><![CDATA[
RESULT = new silver.definition.core.PclosedNt(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Closed_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_openNt">
    <Code><![CDATA[
RESULT = new silver.definition.core.PopenNt(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ClosedOrNot" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_DefLHS">
    <PP>silver:definition:core:DefLHS</PP>
    <Type><![CDATA[silver.definition.core.NDefLHS]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_concreteDefLHSfwd">
    <Code><![CDATA[
RESULT = new silver.definition.core.PconcreteDefLHSfwd(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_DefLHS" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Forward_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_concreteDefLHS">
    <Code><![CDATA[
RESULT = new silver.definition.core.PconcreteDefLHS(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_DefLHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_Expr">
    <PP>silver:definition:core:Expr</PP>
    <Type><![CDATA[silver.definition.core.NExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_plusPlus">
    <Code><![CDATA[
RESULT = new silver.definition.core.PplusPlus(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_PlusPlus_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_stringConst">
    <Code><![CDATA[
RESULT = new silver.definition.core.PstringConst(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_String_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_neg">
    <Class>main</Class>
    <Precedence>13</Precedence>
    <Code><![CDATA[
RESULT = new silver.definition.core.Pneg(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Minus_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_modulus">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pmodulus(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Modulus_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_divide">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pdivide(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Divide_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_multiply">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pmultiply(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Multiply_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_minus">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pminus(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Minus_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_plus">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pplus(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Plus_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_floatConst">
    <Code><![CDATA[
RESULT = new silver.definition.core.PfloatConst(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Float_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_intConst">
    <Code><![CDATA[
RESULT = new silver.definition.core.PintConst(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Int_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_ifThenElse">
    <Class>main</Class>
    <Precedence>0</Precedence>
    <Code><![CDATA[
RESULT = new silver.definition.core.PifThenElse(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_If_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Then_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Else_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_neq">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pneq(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_NEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_eqeq">
    <Code><![CDATA[
RESULT = new silver.definition.core.Peqeq(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_EQEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_lteq">
    <Code><![CDATA[
RESULT = new silver.definition.core.Plteq(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_LTEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_gteq">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pgteq(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_GTEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_lt">
    <Code><![CDATA[
RESULT = new silver.definition.core.Plt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_LT_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_gt">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pgt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_GT_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_not">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pnot(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Not_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_or">
    <Code><![CDATA[
RESULT = new silver.definition.core.Por(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Or_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_and">
    <Code><![CDATA[
RESULT = new silver.definition.core.Pand(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_And_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_falseConst">
    <Code><![CDATA[
RESULT = new silver.definition.core.PfalseConst(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_False_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_trueConst">
    <Code><![CDATA[
RESULT = new silver.definition.core.PtrueConst(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_True_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_decorateExprWith">
    <Code><![CDATA[
RESULT = new silver.definition.core.PdecorateExprWith(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Decorate_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_ExprInhs" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_decorateExprWithEmpty">
    <Code><![CDATA[
RESULT = new silver.definition.core.PdecorateExprWithEmpty(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Decorate_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_access">
    <Code><![CDATA[
RESULT = new silver.definition.core.Paccess(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Dot_t" grammar="host" /><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_forwardAccess">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardAccess(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Dot_t" grammar="host" /><TerminalRef id="silver_definition_core_Forward_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_attributeSection">
    <Code><![CDATA[
RESULT = new silver.definition.core.PattributeSection(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><TerminalRef id="silver_definition_core_Dot_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_applicationEmpty">
    <Code><![CDATA[
RESULT = new silver.definition.core.PapplicationEmpty(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_applicationExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PapplicationExpr(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_AppExprs" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_applicationAnno">
    <Code><![CDATA[
RESULT = new silver.definition.core.PapplicationAnno(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_AnnoAppExprs" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_application">
    <Code><![CDATA[
RESULT = new silver.definition.core.Papplication(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_AppExprs" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_AnnoAppExprs" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_concreteForwardExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PconcreteForwardExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Forward_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_baseExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PbaseExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_nestedExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnestedExpr(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_terminalFunctionLineCol">
    <Code><![CDATA[
RESULT = new silver.definition.core.PterminalFunctionLineCol(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Terminal_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_terminalFunction">
    <Code><![CDATA[
RESULT = new silver.definition.core.PterminalFunction(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Terminal_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_terminalConstructorTemporaryDispatcher">
    <Code><![CDATA[
RESULT = new silver.definition.core.PterminalConstructorTemporaryDispatcher(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Terminal_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_newFunction">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnewFunction(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_New_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_toStringFunction">
    <Code><![CDATA[
RESULT = new silver.definition.core.PtoStringFunction(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_ToString_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_toFloatFunction">
    <Code><![CDATA[
RESULT = new silver.definition.core.PtoFloatFunction(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_ToFloat_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_toIntFunction">
    <Code><![CDATA[
RESULT = new silver.definition.core.PtoIntFunction(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_ToInt_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_lengthFunction">
    <Code><![CDATA[
RESULT = new silver.definition.core.PlengthFunction(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Length_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_primitivepattern_matchPrimitiveConcrete">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PmatchPrimitiveConcrete(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], _children[9], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_primitivepattern_Match_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Return_kwd" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_modification_primitivepattern_PrimPatterns" grammar="host" /><TerminalRef id="silver_definition_core_Else_kwd" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Arrow_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_modification_let_fix_End_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_lambda_fn_lambda_c">
    <Code><![CDATA[
RESULT = new silver.modification.lambda_fn.Plambda_c(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_lambda_fn_Lambda_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionRHS" grammar="host" /><TerminalRef id="silver_modification_lambda_fn_Arrow_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_let_fix_letp_c">
    <Code><![CDATA[
RESULT = new silver.modification.let_fix.Pletp_c(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_let_fix_Let_kwd" grammar="host" /><NonterminalRef id="silver_modification_let_fix_LetAssigns" grammar="host" /><TerminalRef id="silver_modification_let_fix_In_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_modification_let_fix_End_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_originEq">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PoriginEq(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Origins_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_do_c">
    <Code><![CDATA[
RESULT = new silver.extension.monad.Pdo_c(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_monad_Do_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_caseExpr_c">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PcaseExpr_c(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_patternmatching_Case_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Exprs" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Of_kwd" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Opt_Vbar_t" grammar="host" /><NonterminalRef id="silver_extension_patternmatching_MRuleList" grammar="host" /><TerminalRef id="silver_modification_let_fix_End_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_templating_singleLinepptemplateExpr">
    <Code><![CDATA[
RESULT = new silver.extension.templating.PsingleLinepptemplateExpr(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_SLPPTemplate_kwd" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateString" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_pptemplateExpr">
    <Code><![CDATA[
RESULT = new silver.extension.templating.PpptemplateExpr(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_PPTemplate_kwd" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_TemplateString" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_singleLineTemplateExpr">
    <Code><![CDATA[
RESULT = new silver.extension.templating.PsingleLineTemplateExpr(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_SLTemplate_kwd" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateString" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_templateExpr">
    <Code><![CDATA[
RESULT = new silver.extension.templating.PtemplateExpr(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_Template_kwd" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_TemplateString" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_deprecation_concreteDontDecorateExpr">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PconcreteDontDecorateExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_deprecation_NameTickTick" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_deprecation_concreteDecorateExpr">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PconcreteDecorateExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_deprecation_NameTick" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_easyterminal_terminalExprReg">
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.PterminalExprReg(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_easyterminal_EasyTerminalRef" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_list_fullList">
    <Code><![CDATA[
RESULT = new silver.extension.list.PfullList(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_list_LSqr_t" grammar="host" /><NonterminalRef id="silver_definition_core_Exprs" grammar="host" /><TerminalRef id="silver_extension_list_RSqr_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_list_consListOp">
    <Code><![CDATA[
RESULT = new silver.extension.list.PconsListOp(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_list_emptyList">
    <Code><![CDATA[
RESULT = new silver.extension.list.PemptyList(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_list_LSqr_t" grammar="host" /><TerminalRef id="silver_extension_list_RSqr_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_childrenRef">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PchildrenRef(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_convenience_Children_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Int_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ExprInh">
    <PP>silver:definition:core:ExprInh</PP>
    <Type><![CDATA[silver.definition.core.NExprInh]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_exprInh">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexprInh(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ExprInh" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ExprLHSExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ExprInhs">
    <PP>silver:definition:core:ExprInhs</PP>
    <Type><![CDATA[silver.definition.core.NExprInhs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_exprInhsCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexprInhsCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ExprInhs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ExprInh" grammar="host" /><NonterminalRef id="silver_definition_core_ExprInhs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_exprInhsOne">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexprInhsOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ExprInhs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ExprInh" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ExprLHSExpr">
    <PP>silver:definition:core:ExprLHSExpr</PP>
    <Type><![CDATA[silver.definition.core.NExprLHSExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_exprLhsExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexprLhsExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ExprLHSExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_Exprs">
    <PP>silver:definition:core:Exprs</PP>
    <Type><![CDATA[silver.definition.core.NExprs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_exprsCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexprsCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Exprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Exprs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_exprsSingle">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexprsSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Exprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ForwardInh">
    <PP>silver:definition:core:ForwardInh</PP>
    <Type><![CDATA[silver.definition.core.NForwardInh]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_forwardInh">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardInh(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ForwardInh" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ForwardLHSExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ForwardInhs">
    <PP>silver:definition:core:ForwardInhs</PP>
    <Type><![CDATA[silver.definition.core.NForwardInhs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_forwardInhsCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardInhsCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ForwardInhs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ForwardInh" grammar="host" /><NonterminalRef id="silver_definition_core_ForwardInhs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_forwardInhsOne">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardInhsOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ForwardInhs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ForwardInh" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ForwardLHSExpr">
    <PP>silver:definition:core:ForwardLHSExpr</PP>
    <Type><![CDATA[silver.definition.core.NForwardLHSExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_forwardLhsExpr">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardLhsExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ForwardLHSExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_FunctionLHS">
    <PP>silver:definition:core:FunctionLHS</PP>
    <Type><![CDATA[silver.definition.core.NFunctionLHS]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_functionLHS">
    <Code><![CDATA[
RESULT = new silver.definition.core.PfunctionLHS(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_FunctionLHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_FunctionSignature">
    <PP>silver:definition:core:FunctionSignature</PP>
    <Type><![CDATA[silver.definition.core.NFunctionSignature]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_functionSignature">
    <Code><![CDATA[
RESULT = new silver.definition.core.PfunctionSignature(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_FunctionSignature" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_FunctionLHS" grammar="host" /><TerminalRef id="silver_definition_core_CCEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionRHS" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_GrammarDcl">
    <PP>silver:definition:core:GrammarDcl</PP>
    <Type><![CDATA[silver.definition.core.NGrammarDcl]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_grammarDcl_c">
    <Code><![CDATA[
RESULT = new silver.definition.core.PgrammarDcl_c(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_GrammarDcl" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Grammar_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_noGrammarDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnoGrammarDcl(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_GrammarDcl" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ImportStmt">
    <PP>silver:definition:core:ImportStmt</PP>
    <Type><![CDATA[silver.definition.core.NImportStmt]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_importStmt">
    <Code><![CDATA[
RESULT = new silver.definition.core.PimportStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ImportStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Import_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ImportStmts">
    <PP>silver:definition:core:ImportStmts</PP>
    <Type><![CDATA[silver.definition.core.NImportStmts]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_consImportStmts">
    <Code><![CDATA[
RESULT = new silver.definition.core.PconsImportStmts(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ImportStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ImportStmt" grammar="host" /><NonterminalRef id="silver_definition_core_ImportStmts" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_nilImportStmts">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnilImportStmts(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ImportStmts" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ModuleExpr">
    <PP>silver:definition:core:ModuleExpr</PP>
    <Type><![CDATA[silver.definition.core.NModuleExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_moduleAs">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleAs(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_As_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_moduleHidingWith">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleHidingWith(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Hiding_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_NameList" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_WithElems" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_moduleHiding">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleHiding(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Hiding_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_NameList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_moduleOnlyWith">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleOnlyWith(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Only_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_NameList" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_WithElems" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_moduleOnly">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleOnly(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Only_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_NameList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_moduleAllWith">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleAllWith(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_WithElems" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_moduleAll">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleAll(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ModuleName">
    <PP>silver:definition:core:ModuleName</PP>
    <Type><![CDATA[silver.definition.core.NModuleName]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_moduleName">
    <Code><![CDATA[
RESULT = new silver.definition.core.PmoduleName(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleName" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ModuleStmt">
    <PP>silver:definition:core:ModuleStmt</PP>
    <Type><![CDATA[silver.definition.core.NModuleStmt]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_optionalStmt">
    <Code><![CDATA[
RESULT = new silver.definition.core.PoptionalStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Optional_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_exportsWithStmt">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexportsWithStmt(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Exports_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_exportsStmt">
    <Code><![CDATA[
RESULT = new silver.definition.core.PexportsStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Exports_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_ModuleName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_importsStmt">
    <Code><![CDATA[
RESULT = new silver.definition.core.PimportsStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Imports_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_ModuleExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_deprecation_buildsStmt">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PbuildsStmt(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_deprecation_Build_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ModuleStmts">
    <PP>silver:definition:core:ModuleStmts</PP>
    <Type><![CDATA[silver.definition.core.NModuleStmts]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_consModulesStmts">
    <Code><![CDATA[
RESULT = new silver.definition.core.PconsModulesStmts(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ModuleStmt" grammar="host" /><NonterminalRef id="silver_definition_core_ModuleStmts" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_nilModuleStmts">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnilModuleStmts(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ModuleStmts" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_Name">
    <PP>silver:definition:core:Name</PP>
    <Type><![CDATA[silver.definition.core.NName]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_nameIdUpper">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnameIdUpper(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_IdUpper_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_nameIdLower">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnameIdLower(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_IdLower_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_namePluck">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PnamePluck(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Pluck_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_namePrint">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PnamePrint(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Print_kwd" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_NameList">
    <PP>silver:definition:core:NameList</PP>
    <Type><![CDATA[silver.definition.core.NNameList]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_nameListCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnameListCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_NameList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_NameList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_nameListOne">
    <Code><![CDATA[
RESULT = new silver.definition.core.PnameListOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_NameList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ProductionBody">
    <PP>silver:definition:core:ProductionBody</PP>
    <Type><![CDATA[silver.definition.core.NProductionBody]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_productionBody">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionBody(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionStmts" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_deprecation_emptyProductionBodySemi">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PemptyProductionBodySemi(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ProductionLHS">
    <PP>silver:definition:core:ProductionLHS</PP>
    <Type><![CDATA[silver.definition.core.NProductionLHS]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_productionLHS">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionLHS(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionLHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ProductionRHS">
    <PP>silver:definition:core:ProductionRHS</PP>
    <Type><![CDATA[silver.definition.core.NProductionRHS]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_productionRHSCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionRHSCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionRHS" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ProductionRHSElem" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionRHS" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_productionRHSNil">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionRHSNil(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionRHS" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ProductionRHSElem">
    <PP>silver:definition:core:ProductionRHSElem</PP>
    <Type><![CDATA[silver.definition.core.NProductionRHSElem]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_productionRHSElemType">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionRHSElemType(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_productionRHSElem">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionRHSElem(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_easyterminal_productionRhsElemTypeEasyReg">
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.PproductionRhsElemTypeEasyReg(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_easyterminal_EasyTerminalRef" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_easyterminal_productionRhsElemEasyReg">
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.PproductionRhsElemEasyReg(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionRHSElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_extension_easyterminal_EasyTerminalRef" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ProductionSignature">
    <PP>silver:definition:core:ProductionSignature</PP>
    <Type><![CDATA[silver.definition.core.NProductionSignature]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_productionSignature">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionSignature(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionSignature" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ProductionLHS" grammar="host" /><TerminalRef id="silver_definition_core_CCEQ_t" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionRHS" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ProductionStmt">
    <PP>silver:definition:core:ProductionStmt</PP>
    <Type><![CDATA[silver.definition.core.NProductionStmt]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_valueEq">
    <Code><![CDATA[
RESULT = new silver.definition.core.PvalueEq(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_attributeDef">
    <Code><![CDATA[
RESULT = new silver.definition.core.PattributeDef(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_DefLHS" grammar="host" /><TerminalRef id="silver_definition_core_Dot_t" grammar="host" /><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_forwardingWith">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardingWith(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Forwarding_kwd" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_ForwardInhs" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_forwardsToWith">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardsToWith(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Forwards_kwd" grammar="host" /><TerminalRef id="silver_definition_core_To_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_ForwardInhs" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_forwardsTo">
    <Code><![CDATA[
RESULT = new silver.definition.core.PforwardsTo(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Forwards_kwd" grammar="host" /><TerminalRef id="silver_definition_core_To_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_productionAttributeDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionAttributeDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_localAttributeDcl">
    <Code><![CDATA[
RESULT = new silver.definition.core.PlocalAttributeDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Local_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_returnDef">
    <Code><![CDATA[
RESULT = new silver.definition.core.PreturnDef(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Return_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_defaultProdAnno">
    <Code><![CDATA[
RESULT = new silver.definition.core.PdefaultProdAnno(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Default_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Annotation_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_AppExpr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_pushTokenIfStmt">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PpushTokenIfStmt(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], _children[8], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_PushToken_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /><TerminalRef id="silver_definition_core_If_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_pushTokenStmt">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PpushTokenStmt(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_PushToken_kwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_printStmt">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PprintStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Print_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_pluckDef">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PpluckDef(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Pluck_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_valContainsBase">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PvalContainsBase(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_modification_collection_BaseContains_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_valContainsAppend">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PvalContainsAppend(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_modification_collection_Contains_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_attrContainsBase">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PattrContainsBase(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_DefLHS" grammar="host" /><TerminalRef id="silver_definition_core_Dot_t" grammar="host" /><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /><TerminalRef id="silver_modification_collection_BaseContains_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_attrContainsAppend">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PattrContainsAppend(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_DefLHS" grammar="host" /><TerminalRef id="silver_definition_core_Dot_t" grammar="host" /><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /><TerminalRef id="silver_modification_collection_Contains_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_collectionAttributeDclProd">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PcollectionAttributeDclProd(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_modification_collection_NameOrBOperator" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_originPrdStmt">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PoriginPrdStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_Apply_kwd" grammar="host" /><TerminalRef id="silver_extension_bidirtransform_Origins_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_functorattrib_propagateAttrDcl">
    <Code><![CDATA[
RESULT = new silver.extension.functorattrib.PpropagateAttrDcl(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_functorattrib_Propagate_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_NameList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_auto_ast_autoAstDcl">
    <Code><![CDATA[
RESULT = new silver.extension.auto_ast.PautoAstDcl(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Abstract_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_shortProductionDeclwKwds">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PshortProductionDeclwKwds(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_shortProductionDecl">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PshortProductionDecl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Production_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_shortLocalDeclwKwds">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PshortLocalDeclwKwds(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], _children[7], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Local_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Attribute_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_shortLocalDecl">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PshortLocalDecl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Local_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_ProductionStmts">
    <PP>silver:definition:core:ProductionStmts</PP>
    <Type><![CDATA[silver.definition.core.NProductionStmts]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_productionStmtsSnoc">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionStmtsSnoc(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ProductionStmts" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionStmt" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_productionStmtsNil">
    <Code><![CDATA[
RESULT = new silver.definition.core.PproductionStmtsNil(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_ProductionStmts" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_QName">
    <PP>silver:definition:core:QName</PP>
    <Type><![CDATA[silver.definition.core.NQName]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_qNameCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PqNameCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_Colon_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_qNameId">
    <Code><![CDATA[
RESULT = new silver.definition.core.PqNameId(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_QNameAttrOccur">
    <PP>silver:definition:core:QNameAttrOccur</PP>
    <Type><![CDATA[silver.definition.core.NQNameAttrOccur]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_qNameAttrOccur">
    <Code><![CDATA[
RESULT = new silver.definition.core.PqNameAttrOccur(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_QNameType">
    <PP>silver:definition:core:QNameType</PP>
    <Type><![CDATA[silver.definition.core.NQNameType]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_qNameTypeCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PqNameTypeCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_QNameType" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_Colon_t" grammar="host" /><NonterminalRef id="silver_definition_core_QNameType" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_qNameTypeId">
    <Code><![CDATA[
RESULT = new silver.definition.core.PqNameTypeId(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_QNameType" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_IdUpper_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_Root">
    <PP>silver:definition:core:Root</PP>
    <Type><![CDATA[silver.definition.core.NRoot]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_root">
    <Code><![CDATA[
RESULT = new silver.definition.core.Proot(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_Root" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_GrammarDcl" grammar="host" /><NonterminalRef id="silver_definition_core_ModuleStmts" grammar="host" /><NonterminalRef id="silver_definition_core_ImportStmts" grammar="host" /><NonterminalRef id="silver_definition_core_AGDcls" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_WithElem">
    <PP>silver:definition:core:WithElem</PP>
    <Type><![CDATA[silver.definition.core.NWithElem]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_withElement">
    <Code><![CDATA[
RESULT = new silver.definition.core.PwithElement(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_WithElem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_As_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_core_WithElems">
    <PP>silver:definition:core:WithElems</PP>
    <Type><![CDATA[silver.definition.core.NWithElems]]></Type>
  </Nonterminal>
  <Production id="silver_definition_core_withElemsCons">
    <Code><![CDATA[
RESULT = new silver.definition.core.PwithElemsCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_WithElems" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_WithElem" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_WithElems" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_core_withElemsOne">
    <Code><![CDATA[
RESULT = new silver.definition.core.PwithElemsOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_core_WithElems" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_WithElem" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_flow_syntax_FlowSpec">
    <PP>silver:definition:flow:syntax:FlowSpec</PP>
    <Type><![CDATA[silver.definition.flow.syntax.NFlowSpec]]></Type>
  </Nonterminal>
  <Production id="silver_definition_flow_syntax_flowSpecDcl">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PflowSpecDcl(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpec" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecId" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInhs" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_flow_syntax_FlowSpecId">
    <PP>silver:definition:flow:syntax:FlowSpecId</PP>
    <Type><![CDATA[silver.definition.flow.syntax.NFlowSpecId]]></Type>
  </Nonterminal>
  <Production id="silver_definition_flow_syntax_decorateSpecId">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PdecorateSpecId(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecId" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Decorate_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_forwardSpecId">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PforwardSpecId(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecId" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Forward_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_qnameSpecId">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PqnameSpecId(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecId" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_flow_syntax_FlowSpecInh">
    <PP>silver:definition:flow:syntax:FlowSpecInh</PP>
    <Type><![CDATA[silver.definition.flow.syntax.NFlowSpecInh]]></Type>
  </Nonterminal>
  <Production id="silver_definition_flow_syntax_flowSpecDec">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PflowSpecDec(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInh" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Decorate_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_flowSpecInh">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PflowSpecInh(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInh" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QNameAttrOccur" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_flow_syntax_FlowSpecInhs">
    <PP>silver:definition:flow:syntax:FlowSpecInhs</PP>
    <Type><![CDATA[silver.definition.flow.syntax.NFlowSpecInhs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_flow_syntax_consFlowSpecInhs">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PconsFlowSpecInhs(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInhs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInh" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInhs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_oneFlowSpecInhs">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PoneFlowSpecInhs(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInhs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInh" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_nilFlowSpecInhs">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PnilFlowSpecInhs(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecInhs" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_flow_syntax_FlowSpecs">
    <PP>silver:definition:flow:syntax:FlowSpecs</PP>
    <Type><![CDATA[silver.definition.flow.syntax.NFlowSpecs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_flow_syntax_snocFlowSpec">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PsnocFlowSpec(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecs" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_flow_syntax_FlowSpec" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_oneFlowSpec">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PoneFlowSpec(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpecs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_flow_syntax_FlowSpec" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_flow_syntax_NtList">
    <PP>silver:definition:flow:syntax:NtList</PP>
    <Type><![CDATA[silver.definition.flow.syntax.NNtList]]></Type>
  </Nonterminal>
  <Production id="silver_definition_flow_syntax_consNtList">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PconsNtList(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_NtList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_flow_syntax_NtName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_flow_syntax_NtList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_oneNtList">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PoneNtList(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_NtList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_flow_syntax_NtName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_flow_syntax_nilNtList">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PnilNtList(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_NtList" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_flow_syntax_NtName">
    <PP>silver:definition:flow:syntax:NtName</PP>
    <Type><![CDATA[silver.definition.flow.syntax.NNtName]]></Type>
  </Nonterminal>
  <Production id="silver_definition_flow_syntax_ntName">
    <Code><![CDATA[
RESULT = new silver.definition.flow.syntax.PntName(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_flow_syntax_NtName" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_regex_Regex">
    <PP>silver:definition:regex:Regex</PP>
    <Type><![CDATA[silver.definition.regex.NRegex]]></Type>
  </Nonterminal>
  <Production id="silver_definition_regex_regexChoice">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexChoice(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_Regex" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexSeq" grammar="host" /><TerminalRef id="silver_definition_regex_Choice_t" grammar="host" /><NonterminalRef id="silver_definition_regex_Regex" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexSeq">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexSeq(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_Regex" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexSeq" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexEpsilon">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexEpsilon();
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_Regex" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_regex_RegexChar">
    <PP>silver:definition:regex:RegexChar</PP>
    <Type><![CDATA[silver.definition.regex.NRegexChar]]></Type>
  </Nonterminal>
  <Production id="silver_definition_regex_regexEscapedChar">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexEscapedChar(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexChar" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_regex_EscapedChar_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexChar">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexChar(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexChar" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_regex_RegexChar_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_regex_RegexCharSet">
    <PP>silver:definition:regex:RegexCharSet</PP>
    <Type><![CDATA[silver.definition.regex.NRegexCharSet]]></Type>
  </Nonterminal>
  <Production id="silver_definition_regex_regexCharSetOne">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexCharSetOne(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexCharSet" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexCharSetItem" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexCharSetSnoc">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexCharSetSnoc(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexCharSet" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexCharSet" grammar="host" /><NonterminalRef id="silver_definition_regex_RegexCharSetItem" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_regex_RegexCharSetItem">
    <PP>silver:definition:regex:RegexCharSetItem</PP>
    <Type><![CDATA[silver.definition.regex.NRegexCharSetItem]]></Type>
  </Nonterminal>
  <Production id="silver_definition_regex_regexSetRange">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexSetRange(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexCharSetItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexChar" grammar="host" /><TerminalRef id="silver_definition_regex_Range_t" grammar="host" /><NonterminalRef id="silver_definition_regex_RegexChar" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexSetChar">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexSetChar(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexCharSetItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexChar" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_regex_RegexItem">
    <PP>silver:definition:regex:RegexItem</PP>
    <Type><![CDATA[silver.definition.regex.NRegexItem]]></Type>
  </Nonterminal>
  <Production id="silver_definition_regex_regexGroup">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexGroup(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_regex_RegexLParen_t" grammar="host" /><NonterminalRef id="silver_definition_regex_Regex" grammar="host" /><TerminalRef id="silver_definition_regex_RegexRParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexSetInverted">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexSetInverted(_children[0], _children[1], _children[2], _children[3]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_regex_RegexLBrack_t" grammar="host" /><TerminalRef id="silver_definition_regex_RegexNot_t" grammar="host" /><NonterminalRef id="silver_definition_regex_RegexCharSet" grammar="host" /><TerminalRef id="silver_definition_regex_RegexRBrack_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexSet">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexSet(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_regex_RegexLBrack_t" grammar="host" /><NonterminalRef id="silver_definition_regex_RegexCharSet" grammar="host" /><TerminalRef id="silver_definition_regex_RegexRBrack_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexWildcard">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexWildcard(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_regex_RegexWildcard_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexCharItem">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexCharItem(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexChar" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_regex_RegexRepetition">
    <PP>silver:definition:regex:RegexRepetition</PP>
    <Type><![CDATA[silver.definition.regex.NRegexRepetition]]></Type>
  </Nonterminal>
  <Production id="silver_definition_regex_regexOnce">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexOnce(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexRepetition" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexOptional">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexOptional(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexRepetition" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /><TerminalRef id="silver_definition_regex_Optional_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexPlus">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexPlus(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexRepetition" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /><TerminalRef id="silver_definition_regex_Plus_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexKleene">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexKleene(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexRepetition" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexItem" grammar="host" /><TerminalRef id="silver_definition_regex_Kleene_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_regex_RegexSeq">
    <PP>silver:definition:regex:RegexSeq</PP>
    <Type><![CDATA[silver.definition.regex.NRegexSeq]]></Type>
  </Nonterminal>
  <Production id="silver_definition_regex_regexSeqOne">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexSeqOne(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexSeq" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexRepetition" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_regex_regexSeqSnoc">
    <Code><![CDATA[
RESULT = new silver.definition.regex.PregexSeqSnoc(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_definition_regex_RegexSeq" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_regex_RegexSeq" grammar="host" /><NonterminalRef id="silver_definition_regex_RegexRepetition" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_type_syntax_BracketedOptTypeExprs">
    <PP>silver:definition:type:syntax:BracketedOptTypeExprs</PP>
    <Type><![CDATA[silver.definition.type.syntax.NBracketedOptTypeExprs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_type_syntax_botlSome">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PbotlSome(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LT_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExprs" grammar="host" /><TerminalRef id="silver_definition_core_GT_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_botlNone">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PbotlNone(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_definition_type_syntax_Signature">
    <PP>silver:definition:type:syntax:Signature</PP>
    <Type><![CDATA[silver.definition.type.syntax.NSignature]]></Type>
  </Nonterminal>
  <Production id="silver_definition_type_syntax_psignature">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.Ppsignature(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_Signature" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_CCEQ_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExprs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_signatureEmptyRhs">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PsignatureEmptyRhs(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_Signature" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_CCEQ_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_type_syntax_TypeExpr">
    <PP>silver:definition:type:syntax:TypeExpr</PP>
    <Type><![CDATA[silver.definition.type.syntax.NTypeExpr]]></Type>
  </Nonterminal>
  <Production id="silver_definition_type_syntax_funTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PfunTypeExpr(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_Signature" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_refTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PrefTypeExpr(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_type_syntax_Decorated_tkwd" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_typeVariableTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PtypeVariableTypeExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_IdLower_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_nominalTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PnominalTypeExpr(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QNameType" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_booleanTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PbooleanTypeExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_type_syntax_Boolean_tkwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_stringTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PstringTypeExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_type_syntax_String_tkwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_floatTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PfloatTypeExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_type_syntax_Float_tkwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_integerTypeExpr">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PintegerTypeExpr(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_type_syntax_Integer_tkwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_deprecation_funTypeLegacy">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PfunTypeLegacy(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_deprecation_Function_tkwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_Signature" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_deprecation_prodTypeExpr">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PprodTypeExpr(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_deprecation_Production_tkwd" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_Signature" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_list_listTypeExpr">
    <Code><![CDATA[
RESULT = new silver.extension.list.PlistTypeExpr(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_list_LSqr_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_extension_list_RSqr_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_definition_type_syntax_TypeExprs">
    <PP>silver:definition:type:syntax:TypeExprs</PP>
    <Type><![CDATA[silver.definition.type.syntax.NTypeExprs]]></Type>
  </Nonterminal>
  <Production id="silver_definition_type_syntax_typeListCons">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PtypeListCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExprs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_definition_type_syntax_typeListSingle">
    <Code><![CDATA[
RESULT = new silver.definition.type.syntax.PtypeListSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_definition_type_syntax_TypeExprs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_FullNonterminal">
    <PP>silver:extension:bidirtransform:FullNonterminal</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NFullNonterminal]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_fullNt">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PfullNt(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_FullNonterminal" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_NonterminalList">
    <PP>silver:extension:bidirtransform:NonterminalList</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NNonterminalList]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_consNt">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PconsNt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_bidirtransform_FullNonterminal" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_singleNt">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PsingleNt(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_NonterminalList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_bidirtransform_FullNonterminal" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_OptRHSType">
    <PP>silver:extension:bidirtransform:OptRHSType</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NOptRHSType]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_noRHSType">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PnoRHSType();
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_OptRHSType" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_oneRHSType">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PoneRHSType(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_OptRHSType" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_ProductionDef">
    <PP>silver:extension:bidirtransform:ProductionDef</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NProductionDef]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_productionDef">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PproductionDef(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_ProductionDef" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_QNameList">
    <PP>silver:extension:bidirtransform:QNameList</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NQNameList]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_qNameListCons">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PqNameListCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_QNameList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_QNameList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_qNameListSingle">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PqNameListSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_QNameList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_RewriteArrow">
    <PP>silver:extension:bidirtransform:RewriteArrow</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NRewriteArrow]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_longRewriteArrow">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PlongRewriteArrow(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteArrow" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_bidirtransform_RestoreArrow_t" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_OptRHSType" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_shortRewriteArrow">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PshortRewriteArrow(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteArrow" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_patternmatching_Arrow_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_OptRHSType" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_RewriteProduction">
    <PP>silver:extension:bidirtransform:RewriteProduction</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NRewriteProduction]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_rewriteProduction">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PrewriteProduction(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteProduction" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_RewriteProductionArgs" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_RewriteProductionArgs">
    <PP>silver:extension:bidirtransform:RewriteProductionArgs</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NRewriteProductionArgs]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_rewriteProductionArgMany">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PrewriteProductionArgMany(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteProductionArgs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_bidirtransform_RewriteProductionArgs" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_rewriteProductionArgSingle">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PrewriteProductionArgSingle(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteProductionArgs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_RewriteRule">
    <PP>silver:extension:bidirtransform:RewriteRule</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NRewriteRule]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_rewriteRuleType">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PrewriteRuleType(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteRule" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_RewriteArrow" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_rewriteRuleProd">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PrewriteRuleProd(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteRule" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_bidirtransform_RewriteProduction" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_RewriteArrow" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_RewriteRuleList">
    <PP>silver:extension:bidirtransform:RewriteRuleList</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NRewriteRuleList]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_rewriteRuleSingle">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PrewriteRuleSingle(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteRuleList" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_RewriteRule" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_rewriteRuleCons">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PrewriteRuleCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_RewriteRuleList" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_RewriteRule" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_RewriteRuleList" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_TransformDcl">
    <PP>silver:extension:bidirtransform:TransformDcl</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NTransformDcl]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_transformDcl">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PtransformDcl(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_TransformDcl" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_TransformRuleList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_TransformList">
    <PP>silver:extension:bidirtransform:TransformList</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NTransformList]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_transformListCons">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PtransformListCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_TransformList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_bidirtransform_TransformDcl" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_TransformList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_transformListSingle">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PtransformListSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_TransformList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_bidirtransform_TransformDcl" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_TransformRule">
    <PP>silver:extension:bidirtransform:TransformRule</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NTransformRule]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_transformRule">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PtransformRule(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_TransformRule" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_bidirtransform_ProductionDef" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Arrow_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_bidirtransform_TransformRuleList">
    <PP>silver:extension:bidirtransform:TransformRuleList</PP>
    <Type><![CDATA[silver.extension.bidirtransform.NTransformRuleList]]></Type>
  </Nonterminal>
  <Production id="silver_extension_bidirtransform_transformRuleSingle">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PtransformRuleSingle(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_TransformRuleList" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_TransformRule" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_bidirtransform_transformRuleCons">
    <Code><![CDATA[
RESULT = new silver.extension.bidirtransform.PtransformRuleCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_bidirtransform_TransformRuleList" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_TransformRule" grammar="host" /><NonterminalRef id="silver_extension_bidirtransform_TransformRuleList" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_convenience_OptionalAction">
    <PP>silver:extension:convenience:OptionalAction</PP>
    <Type><![CDATA[silver.extension.convenience.NOptionalAction]]></Type>
  </Nonterminal>
  <Production id="silver_extension_convenience_anOptionalAction">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PanOptionalAction(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_OptionalAction" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Action_kwd" grammar="host" /><NonterminalRef id="silver_modification_copper_ActionCode_c" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_noOptionalAction">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PnoOptionalAction(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_OptionalAction" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_extension_convenience_OptionalName">
    <PP>silver:extension:convenience:OptionalName</PP>
    <Type><![CDATA[silver.extension.convenience.NOptionalName]]></Type>
  </Nonterminal>
  <Production id="silver_extension_convenience_anOptionalName">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PanOptionalName(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_OptionalName" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_noOptionalName">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PnoOptionalName(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_OptionalName" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_extension_convenience_ProductionDclStmt">
    <PP>silver:extension:convenience:ProductionDclStmt</PP>
    <Type><![CDATA[silver.extension.convenience.NProductionDclStmt]]></Type>
  </Nonterminal>
  <Production id="silver_extension_convenience_productionDclStmt">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PproductionDclStmt(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_ProductionDclStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_convenience_OptionalName" grammar="host" /><TerminalRef id="silver_extension_convenience_ProdVBar" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionRHS" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_ProductionModifiers" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionBody" grammar="host" /><NonterminalRef id="silver_extension_convenience_OptionalAction" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_convenience_ProductionDclStmts">
    <PP>silver:extension:convenience:ProductionDclStmts</PP>
    <Type><![CDATA[silver.extension.convenience.NProductionDclStmts]]></Type>
  </Nonterminal>
  <Production id="silver_extension_convenience_productionDclStmtsCons">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PproductionDclStmtsCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_ProductionDclStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_convenience_ProductionDclStmt" grammar="host" /><NonterminalRef id="silver_extension_convenience_ProductionDclStmts" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_productionDclStmtsOne">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PproductionDclStmtsOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_ProductionDclStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_convenience_ProductionDclStmt" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_convenience_QNameWithTL">
    <PP>silver:extension:convenience:QNameWithTL</PP>
    <Type><![CDATA[silver.extension.convenience.NQNameWithTL]]></Type>
  </Nonterminal>
  <Production id="silver_extension_convenience_qNameWithTL">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PqNameWithTL(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_BracketedOptTypeExprs" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_convenience_QNames">
    <PP>silver:extension:convenience:QNames</PP>
    <Type><![CDATA[silver.extension.convenience.NQNames]]></Type>
  </Nonterminal>
  <Production id="silver_extension_convenience_qNamesCons">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PqNamesCons(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_qNamesSingle">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PqNamesSingle(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_QNames" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_convenience_QNames2">
    <PP>silver:extension:convenience:QNames2</PP>
    <Type><![CDATA[silver.extension.convenience.NQNames2]]></Type>
  </Nonterminal>
  <Production id="silver_extension_convenience_qNames2Cons">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PqNames2Cons(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_convenience_qNames2Two">
    <Code><![CDATA[
RESULT = new silver.extension.convenience.PqNames2Two(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_convenience_QNames2" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_extension_convenience_QNameWithTL" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_deprecation_NameTick">
    <PP>silver:extension:deprecation:NameTick</PP>
    <Type><![CDATA[silver.extension.deprecation.NNameTick]]></Type>
  </Nonterminal>
  <Production id="silver_extension_deprecation_nameIdTick">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PnameIdTick(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_deprecation_NameTick" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_deprecation_IdTick_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_deprecation_NameTickTick">
    <PP>silver:extension:deprecation:NameTickTick</PP>
    <Type><![CDATA[silver.extension.deprecation.NNameTickTick]]></Type>
  </Nonterminal>
  <Production id="silver_extension_deprecation_nameIdTickTick">
    <Code><![CDATA[
RESULT = new silver.extension.deprecation.PnameIdTickTick(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_deprecation_NameTickTick" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_deprecation_IdTickTick_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_doc_core_DclComment">
    <PP>silver:extension:doc:core:DclComment</PP>
    <Type><![CDATA[silver.extension.doc.core.NDclComment]]></Type>
  </Nonterminal>
  <Production id="silver_extension_doc_core_dclComment">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PdclComment(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DclComment" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_CommentOpen_t" grammar="host" /><NonterminalRef id="silver_extension_doc_core_DclCommentComponents" grammar="host" /><TerminalRef id="silver_extension_doc_core_Close_t" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_doc_core_DclCommentComponent">
    <PP>silver:extension:doc:core:DclCommentComponent</PP>
    <Type><![CDATA[silver.extension.doc.core.NDclCommentComponent]]></Type>
  </Nonterminal>
  <Production id="silver_extension_doc_core_componentWhiteSpace">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PcomponentWhiteSpace(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DclCommentComponent" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_WhiteSpace" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_doc_core_componentText">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PcomponentText(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DclCommentComponent" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_CommentText_t" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_doc_core_componentLink">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PcomponentLink(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DclCommentComponent" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_CommentLink_t" grammar="host" /><TerminalRef id="silver_extension_doc_core_CommentOpenSquare_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_extension_doc_core_CommentCloseSquare_t" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_doc_core_DclCommentComponents">
    <PP>silver:extension:doc:core:DclCommentComponents</PP>
    <Type><![CDATA[silver.extension.doc.core.NDclCommentComponents]]></Type>
  </Nonterminal>
  <Production id="silver_extension_doc_core_nilCommentComps">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnilCommentComps(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DclCommentComponents" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_extension_doc_core_consCommentComps">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PconsCommentComps(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DclCommentComponents" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DclCommentComponent" grammar="host" /><NonterminalRef id="silver_extension_doc_core_DclCommentComponents" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_doc_core_DocConfig">
    <PP>silver:extension:doc:core:DocConfig</PP>
    <Type><![CDATA[silver.extension.doc.core.NDocConfig]]></Type>
  </Nonterminal>
  <Production id="silver_extension_doc_core_noDocConfig">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnoDocConfig(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DocConfig" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_ConfigNoDoc_t" grammar="host" /><TerminalRef id="silver_definition_core_Colon_t" grammar="host" /><TerminalRef id="silver_extension_doc_core_ConfigValue_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_splitFilesConfig">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PsplitFilesConfig(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DocConfig" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_ConfigSplitFiles_t" grammar="host" /><TerminalRef id="silver_definition_core_Colon_t" grammar="host" /><TerminalRef id="silver_extension_doc_core_ConfigValue_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_doc_core_headerConfig">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PheaderConfig(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DocConfig" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_doc_core_ConfigHeader_t" grammar="host" /><TerminalRef id="silver_definition_core_Colon_t" grammar="host" /><TerminalRef id="silver_extension_doc_core_ConfigValue_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_doc_core_DocConfigs">
    <PP>silver:extension:doc:core:DocConfigs</PP>
    <Type><![CDATA[silver.extension.doc.core.NDocConfigs]]></Type>
  </Nonterminal>
  <Production id="silver_extension_doc_core_nilConfigs">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PnilConfigs();
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DocConfigs" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_extension_doc_core_consConfigs">
    <Code><![CDATA[
RESULT = new silver.extension.doc.core.PconsConfigs(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_extension_doc_core_DocConfigs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_doc_core_DocConfig" grammar="host" /><NonterminalRef id="silver_extension_doc_core_DocConfigs" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_easyterminal_EasyTerminalRef">
    <PP>silver:extension:easyterminal:EasyTerminalRef</PP>
    <Type><![CDATA[silver.extension.easyterminal.NEasyTerminalRef]]></Type>
  </Nonterminal>
  <Production id="silver_extension_easyterminal_easyTerminalRef">
    <Code><![CDATA[
RESULT = new silver.extension.easyterminal.PeasyTerminalRef(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_easyterminal_EasyTerminalRef" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_easyterminal_Terminal_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_monad_DoBodyStmt">
    <PP>silver:extension:monad:DoBodyStmt</PP>
    <Type><![CDATA[silver.extension.monad.NDoBodyStmt]]></Type>
  </Nonterminal>
  <Production id="silver_extension_monad_condDoBodyElse">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PcondDoBodyElse(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_If_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Then_kwd" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /><TerminalRef id="silver_definition_core_Else_kwd" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_condDoBody">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PcondDoBody(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_If_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Then_kwd" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /><TerminalRef id="silver_extension_monad_NoElse_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_returnDoBody">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PreturnDoBody(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Return_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_exprDoBody">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PexprDoBody(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_doBodyBlock">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PdoBodyBlock(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_monad_DoBodyStmts">
    <PP>silver:extension:monad:DoBodyStmts</PP>
    <Type><![CDATA[silver.extension.monad.NDoBodyStmts]]></Type>
  </Nonterminal>
  <Production id="silver_extension_monad_oneDoBodyStmt">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PoneDoBodyStmt(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_consDoBodyStmt">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PconsDoBodyStmt(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_monad_DoBodyStmt" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_letExprDoBodyStmts">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PletExprDoBodyStmts(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_monad_MName" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_bindExprDoBodyStmts">
    <Code><![CDATA[
RESULT = new silver.extension.monad.PbindExprDoBodyStmts(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], _children[6], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_monad_MName" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_extension_monad_LArrow_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /><NonterminalRef id="silver_extension_monad_DoBodyStmts" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_monad_MName">
    <PP>silver:extension:monad:MName</PP>
    <Type><![CDATA[silver.extension.monad.NMName]]></Type>
  </Nonterminal>
  <Production id="silver_extension_monad_mNameIdUpper">
    <Class>main</Class>
    <Precedence>2</Precedence>
    <Code><![CDATA[
RESULT = new silver.extension.monad.PmNameIdUpper(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_MName" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_IdUpper_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_monad_mNameIdLower">
    <Class>main</Class>
    <Precedence>2</Precedence>
    <Code><![CDATA[
RESULT = new silver.extension.monad.PmNameIdLower(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_monad_MName" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_IdLower_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_patternmatching_MRuleList">
    <PP>silver:extension:patternmatching:MRuleList</PP>
    <Type><![CDATA[silver.extension.patternmatching.NMRuleList]]></Type>
  </Nonterminal>
  <Production id="silver_extension_patternmatching_mRuleList_cons">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PmRuleList_cons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_MRuleList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_patternmatching_MatchRule" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /><NonterminalRef id="silver_extension_patternmatching_MRuleList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_mRuleList_one">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PmRuleList_one(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_MRuleList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_patternmatching_MatchRule" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_patternmatching_MatchRule">
    <PP>silver:extension:patternmatching:MatchRule</PP>
    <Type><![CDATA[silver.extension.patternmatching.NMatchRule]]></Type>
  </Nonterminal>
  <Production id="silver_extension_patternmatching_matchRule_c">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PmatchRule_c(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_MatchRule" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Arrow_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_patternmatching_Pattern">
    <PP>silver:extension:patternmatching:Pattern</PP>
    <Type><![CDATA[silver.extension.patternmatching.NPattern]]></Type>
  </Nonterminal>
  <Production id="silver_extension_patternmatching_listPattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PlistPattern(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_list_LSqr_t" grammar="host" /><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /><TerminalRef id="silver_extension_list_RSqr_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_consListPattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PconsListPattern(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_falsePattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PfalsePattern(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_False_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_truePattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PtruePattern(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_True_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_strPattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PstrPattern(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_String_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_intPattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PintPattern(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Int_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_varPattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PvarPattern(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_wildcPattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PwildcPattern(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_UnderScore_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_prodAppPattern">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PprodAppPattern(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_patternmatching_PatternList">
    <PP>silver:extension:patternmatching:PatternList</PP>
    <Type><![CDATA[silver.extension.patternmatching.NPatternList]]></Type>
  </Nonterminal>
  <Production id="silver_extension_patternmatching_patternList_nil">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PpatternList_nil(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_patternList_more">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PpatternList_more(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_extension_patternmatching_patternList_one">
    <Code><![CDATA[
RESULT = new silver.extension.patternmatching.PpatternList_one(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_patternmatching_PatternList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_patternmatching_Pattern" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_NonWater">
    <PP>silver:extension:templating:syntax:NonWater</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NNonWater]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_nonwater">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.Pnonwater(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_NonWater" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_OpenEscape" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_SingleLineTemplateString">
    <PP>silver:extension:templating:syntax:SingleLineTemplateString</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NSingleLineTemplateString]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_singleLineTemplateStringEmpty">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineTemplateStringEmpty(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateString" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_LiteralQuote" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_singleLineTemplateString">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineTemplateString(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateString" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBody" grammar="host" /><TerminalRef id="silver_extension_templating_syntax_LiteralQuote" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_SingleLineTemplateStringBody">
    <PP>silver:extension:templating:syntax:SingleLineTemplateStringBody</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NSingleLineTemplateStringBody]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_singleLineBodyOneWater">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineBodyOneWater(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBody" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWater" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_singleLineBodyOne">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineBodyOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBody" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBodyItem" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_singleLineBodyCons">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineBodyCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBody" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBodyItem" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBody" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_SingleLineTemplateStringBodyItem">
    <PP>silver:extension:templating:syntax:SingleLineTemplateStringBodyItem</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NSingleLineTemplateStringBodyItem]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_singleLineItemEscape">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineItemEscape(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBodyItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_NonWater" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_singleLineItemWaterEscape">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineItemWaterEscape(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineTemplateStringBodyItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWater" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_NonWater" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_SingleLineWater">
    <PP>silver:extension:templating:syntax:SingleLineWater</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NSingleLineWater]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_singleLineWaterOne">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineWaterOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWater" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWaterItem" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_singleLineWaterCons">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineWaterCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWater" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWater" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_SingleLineWaterItem" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_SingleLineWaterItem">
    <PP>silver:extension:templating:syntax:SingleLineWaterItem</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NSingleLineWaterItem]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_singleLineWaterBackSlash">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineWaterBackSlash(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_LiteralBackslash" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_singleLineWaterDollar">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineWaterDollar(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_DoubleDollar" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_singleLineWater">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PsingleLineWater(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_SingleLineWaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_SingleLineQuoteWater" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_TemplateString">
    <PP>silver:extension:templating:syntax:TemplateString</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NTemplateString]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_templateStringEmpty">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PtemplateStringEmpty(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_TemplateString" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_TripleQuote" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_templateString">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PtemplateString(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_TemplateString" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBody" grammar="host" /><TerminalRef id="silver_extension_templating_syntax_TripleQuote" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_TemplateStringBody">
    <PP>silver:extension:templating:syntax:TemplateStringBody</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NTemplateStringBody]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_bodyOneWater">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PbodyOneWater(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBody" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_Water" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_bodyOne">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PbodyOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBody" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBodyItem" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_bodyCons">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PbodyCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBody" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBodyItem" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBody" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_TemplateStringBodyItem">
    <PP>silver:extension:templating:syntax:TemplateStringBodyItem</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NTemplateStringBodyItem]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_itemEscape">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PitemEscape(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBodyItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_NonWater" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_itemWaterEscape">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PitemWaterEscape(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_TemplateStringBodyItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_Water" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_NonWater" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_Water">
    <PP>silver:extension:templating:syntax:Water</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NWater]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_waterOne">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PwaterOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_Water" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_waterCons">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PwaterCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_Water" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_templating_syntax_Water" grammar="host" /><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_extension_templating_syntax_WaterItem">
    <PP>silver:extension:templating:syntax:WaterItem</PP>
    <Type><![CDATA[silver.extension.templating.syntax.NWaterItem]]></Type>
  </Nonterminal>
  <Production id="silver_extension_templating_syntax_waterQuote">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PwaterQuote(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_LiteralQuote" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_waterTab">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PwaterTab(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_LiteralTab" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_waterNewline">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PwaterNewline(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_LiteralNewline" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_waterBackSlash">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PwaterBackSlash(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_LiteralBackslash" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_waterDollar">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.PwaterDollar(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_DoubleDollar" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>
  <Production id="silver_extension_templating_syntax_water">
    <Code><![CDATA[
RESULT = new silver.extension.templating.syntax.Pwater(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_extension_templating_syntax_WaterItem" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_extension_templating_syntax_QuoteWater" grammar="host" /></RHS>
    <Layout></Layout>
  </Production>

  <Nonterminal id="silver_modification_collection_NameOrBOperator">
    <PP>silver:modification:collection:NameOrBOperator</PP>
    <Type><![CDATA[silver.modification.collection.NNameOrBOperator]]></Type>
  </Nonterminal>
  <Production id="silver_modification_collection_bandOperator">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PbandOperator(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_collection_NameOrBOperator" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_And_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_borOperator">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PborOperator(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_collection_NameOrBOperator" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Or_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_plusplusOperator">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PplusplusOperator(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_collection_NameOrBOperator" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_PlusPlus_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_collection_nameOperator">
    <Code><![CDATA[
RESULT = new silver.modification.collection.PnameOperator(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_collection_NameOrBOperator" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_ActionCode_c">
    <PP>silver:modification:copper:ActionCode_c</PP>
    <Type><![CDATA[silver.modification.copper.NActionCode_c]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_actionCode_c">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PactionCode_c(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ActionCode_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_definition_core_ProductionStmts" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_ClassList">
    <PP>silver:modification:copper:ClassList</PP>
    <Type><![CDATA[silver.modification.copper.NClassList]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_lexerClassesCons">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassesCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ClassList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_modification_copper_ClassList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_lexerClassesOne">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassesOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ClassList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_LexerClassModifier">
    <PP>silver:modification:copper:LexerClassModifier</PP>
    <Type><![CDATA[silver.modification.copper.NLexerClassModifier]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_lexerClassModifierFont">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PlexerClassModifierFont(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_LexerClassModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_Font_kwd" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_lexerClassModifierSubmitsTo">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassModifierSubmitsTo(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_LexerClassModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Submits_t" grammar="host" /><TerminalRef id="silver_definition_core_To_kwd" grammar="host" /><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_lexerClassModifierDominates">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassModifierDominates(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_LexerClassModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Dominates_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_LexerClassModifiers">
    <PP>silver:modification:copper:LexerClassModifiers</PP>
    <Type><![CDATA[silver.modification.copper.NLexerClassModifiers]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_lexerClassModifiersCons">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassModifiersCons(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_LexerClassModifiers" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_copper_LexerClassModifier" grammar="host" /><NonterminalRef id="silver_modification_copper_LexerClassModifiers" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_lexerClassModifierSingle">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PlexerClassModifierSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_LexerClassModifiers" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_copper_LexerClassModifier" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_ParserComponent">
    <PP>silver:modification:copper:ParserComponent</PP>
    <Type><![CDATA[silver.modification.copper.NParserComponent]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_prefixSeparatorParserComponent">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PprefixSeparatorParserComponent(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponent" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Prefix_t" grammar="host" /><TerminalRef id="silver_modification_copper_Separator_kwd" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_disambiguateParserComponent">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PdisambiguateParserComponent(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponent" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Prefer_t" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_modification_copper_Over_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TermList" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_parserComponent">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PparserComponent(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponent" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_ModuleName" grammar="host" /><NonterminalRef id="silver_modification_copper_ParserComponentModifiers" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_ParserComponentModifier">
    <PP>silver:modification:copper:ParserComponentModifier</PP>
    <Type><![CDATA[silver.modification.copper.NParserComponentModifier]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_prefixParserComponentModifier">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PprefixParserComponentModifier(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponentModifier" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_copper_Prefix_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TerminalPrefixItems" grammar="host" /><TerminalRef id="silver_definition_core_With_kwd" grammar="host" /><NonterminalRef id="silver_modification_copper_TerminalPrefix" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_ParserComponentModifiers">
    <PP>silver:modification:copper:ParserComponentModifiers</PP>
    <Type><![CDATA[silver.modification.copper.NParserComponentModifiers]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_consParserComponentModifier">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PconsParserComponentModifier(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponentModifiers" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_copper_ParserComponentModifier" grammar="host" /><NonterminalRef id="silver_modification_copper_ParserComponentModifiers" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_nilParserComponentModifier">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PnilParserComponentModifier(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponentModifiers" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_ParserComponents">
    <PP>silver:modification:copper:ParserComponents</PP>
    <Type><![CDATA[silver.modification.copper.NParserComponents]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_consParserComponent">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PconsParserComponent(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponents" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_copper_ParserComponent" grammar="host" /><NonterminalRef id="silver_modification_copper_ParserComponents" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_nilParserComponent">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PnilParserComponent(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_ParserComponents" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_TermList">
    <PP>silver:modification:copper:TermList</PP>
    <Type><![CDATA[silver.modification.copper.NTermList]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_termListCons">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PtermListCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TermList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TermList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_termListOne">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PtermListOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TermList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_TermPrecList">
    <PP>silver:modification:copper:TermPrecList</PP>
    <Type><![CDATA[silver.modification.copper.NTermPrecList]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_termPrecListCons">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PtermPrecListCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_termPrecListOne">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PtermPrecListOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TermPrecList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_TerminalPrefix">
    <PP>silver:modification:copper:TerminalPrefix</PP>
    <Type><![CDATA[silver.modification.copper.NTerminalPrefix]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_seperatedTerminalPrefix">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PseperatedTerminalPrefix(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefix" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_String_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_newTermTerminalPrefix">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PnewTermTerminalPrefix(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefix" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_RegExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_newTermModifiersTerminalPrefix">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PnewTermModifiersTerminalPrefix(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefix" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_concrete_syntax_RegExpr" grammar="host" /><NonterminalRef id="silver_definition_concrete_syntax_TerminalModifiers" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_nameTerminalPrefix">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PnameTerminalPrefix(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefix" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_TerminalPrefixItem">
    <PP>silver:modification:copper:TerminalPrefixItem</PP>
    <Type><![CDATA[silver.modification.copper.NTerminalPrefixItem]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_easyTerminalRefTerminalPrefixItem">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PeasyTerminalRefTerminalPrefixItem(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefixItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_extension_easyterminal_EasyTerminalRef" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_qNameTerminalPrefixItem">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PqNameTerminalPrefixItem(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefixItem" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_copper_TerminalPrefixItems">
    <PP>silver:modification:copper:TerminalPrefixItems</PP>
    <Type><![CDATA[silver.modification.copper.NTerminalPrefixItems]]></Type>
  </Nonterminal>
  <Production id="silver_modification_copper_allTerminalPrefixItem">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PallTerminalPrefixItem(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefixItems" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_modification_copper_oneTerminalPrefixItem">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PoneTerminalPrefixItem(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefixItems" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_copper_TerminalPrefixItem" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_copper_consTerminalPrefixItem">
    <Code><![CDATA[
RESULT = new silver.modification.copper.PconsTerminalPrefixItem(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_copper_TerminalPrefixItems" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_copper_TerminalPrefixItem" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_modification_copper_TerminalPrefixItems" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_ffi_FFIDef">
    <PP>silver:modification:ffi:FFIDef</PP>
    <Type><![CDATA[silver.modification.ffi.NFFIDef]]></Type>
  </Nonterminal>
  <Production id="silver_modification_ffi_ffidef">
    <Code><![CDATA[
RESULT = new silver.modification.ffi.Pffidef(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_ffi_FFIDef" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Colon_t" grammar="host" /><TerminalRef id="silver_definition_core_Return_kwd" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_ffi_FFIDefs">
    <PP>silver:modification:ffi:FFIDefs</PP>
    <Type><![CDATA[silver.modification.ffi.NFFIDefs]]></Type>
  </Nonterminal>
  <Production id="silver_modification_ffi_ffidefsMany">
    <Code><![CDATA[
RESULT = new silver.modification.ffi.PffidefsMany(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_ffi_FFIDefs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_ffi_FFIDef" grammar="host" /><NonterminalRef id="silver_modification_ffi_FFIDefs" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_ffi_ffidefsOne">
    <Code><![CDATA[
RESULT = new silver.modification.ffi.PffidefsOne(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_ffi_FFIDefs" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_ffi_FFIDef" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_FontStyle">
    <PP>silver:modification:impide:FontStyle</PP>
    <Type><![CDATA[silver.modification.impide.NFontStyle]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_fontStyleItalicDcl">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PfontStyleItalicDcl(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_FontStyle" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_Italic_kwd" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_fontStyleBoldDcl">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PfontStyleBoldDcl(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_FontStyle" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_Bold_kwd" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_FontStyles">
    <PP>silver:modification:impide:FontStyles</PP>
    <Type><![CDATA[silver.modification.impide.NFontStyles]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_nilFontStylesDcl">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PnilFontStylesDcl();
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_FontStyles" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_modification_impide_consFontStylesDcl">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PconsFontStylesDcl(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_FontStyles" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_impide_FontStyle" grammar="host" /><NonterminalRef id="silver_modification_impide_FontStyles" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_IdePropertyOption">
    <PP>silver:modification:impide:IdePropertyOption</PP>
    <Type><![CDATA[silver.modification.impide.NIdePropertyOption]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_idePropertyOption_displayName">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PidePropertyOption_displayName(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdePropertyOption" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_PropOption_Display_t" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_idePropertyOption_defaultVal">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PidePropertyOption_defaultVal(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdePropertyOption" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_PropOption_Default_t" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_idePropertyOption_optional">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PidePropertyOption_optional(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdePropertyOption" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_PropOption_Required_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_IdePropertyOptions">
    <PP>silver:modification:impide:IdePropertyOptions</PP>
    <Type><![CDATA[silver.modification.impide.NIdePropertyOptions]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_consPropertyOptions">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PconsPropertyOptions(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdePropertyOptions" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_impide_IdePropertyOption" grammar="host" /><NonterminalRef id="silver_modification_impide_IdePropertyOptions" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_nilPropertyOptions">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PnilPropertyOptions();
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdePropertyOptions" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_IdeStmt">
    <PP>silver:modification:impide:IdeStmt</PP>
    <Type><![CDATA[silver.modification.impide.NIdeStmt]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_newfileWizard_c">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PnewfileWizard_c(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_Wizard" grammar="host" /><TerminalRef id="silver_modification_impide_ImpIde_Wizard_NewFile" grammar="host" /><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_impide_StubGenerator" grammar="host" /><NonterminalRef id="silver_modification_impide_PropertyList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_resourceIdeStmt">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PresourceIdeStmt(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_IdeResource" grammar="host" /><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_versionIdeStmt">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PversionIdeStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_ProdInfo_Version_t" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_nameIdeStmt">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PnameIdeStmt(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_ProdInfo_Name_t" grammar="host" /><TerminalRef id="silver_definition_core_String_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_makeIdeStmt_Porperty">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PmakeIdeStmt_Porperty(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_impide_Property" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_makeIdeStmt_Folder">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PmakeIdeStmt_Folder(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_OptFunc_Folder" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_makeIdeStmt_Exporter">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PmakeIdeStmt_Exporter(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_OptFunc_Exporter" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_makeIdeStmt_PostBuilder">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PmakeIdeStmt_PostBuilder(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_OptFunc_PostBuilder" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_makeIdeStmt_Builder">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PmakeIdeStmt_Builder(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_OptFunc_Builder" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_IdeStmtList">
    <PP>silver:modification:impide:IdeStmtList</PP>
    <Type><![CDATA[silver.modification.impide.NIdeStmtList]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_consIdeStmtList">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PconsIdeStmtList(_children[0], _children[1], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmtList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_impide_IdeStmt" grammar="host" /><NonterminalRef id="silver_modification_impide_IdeStmtList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_nilIdeStmtList">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PnilIdeStmtList(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmtList" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_IdeStmts">
    <PP>silver:modification:impide:IdeStmts</PP>
    <Type><![CDATA[silver.modification.impide.NIdeStmts]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_listIdeStmts2">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PlistIdeStmts2(_children[0], _children[1], _children[2], _children[3], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmts" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_impide_IdeStmtList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_listIdeStmts">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PlistIdeStmts(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmts" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_LCurly_t" grammar="host" /><NonterminalRef id="silver_modification_impide_IdeStmtList" grammar="host" /><TerminalRef id="silver_definition_core_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_emptyIdeStmts">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PemptyIdeStmts(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_IdeStmts" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_Property">
    <PP>silver:modification:impide:Property</PP>
    <Type><![CDATA[silver.modification.impide.NProperty]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_makeProperty">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PmakeProperty(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_Property" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_OptFunc_Property" grammar="host" /><TerminalRef id="silver_definition_core_IdLower_t" grammar="host" /><NonterminalRef id="silver_modification_impide_TypeName" grammar="host" /><NonterminalRef id="silver_modification_impide_IdePropertyOptions" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_PropertyList">
    <PP>silver:modification:impide:PropertyList</PP>
    <Type><![CDATA[silver.modification.impide.NPropertyList]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_consPropertyList">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PconsPropertyList(_children[0], _children[1]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_PropertyList" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_impide_Property" grammar="host" /><NonterminalRef id="silver_modification_impide_PropertyList" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_nilPropertyList">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PnilPropertyList();
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_PropertyList" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_StubGenerator">
    <PP>silver:modification:impide:StubGenerator</PP>
    <Type><![CDATA[silver.modification.impide.NStubGenerator]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_makeStubGenerator">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PmakeStubGenerator(_children[0], _children[1], _children[2]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_StubGenerator" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_Wizard_StubGen" grammar="host" /><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_impide_TypeName">
    <PP>silver:modification:impide:TypeName</PP>
    <Type><![CDATA[silver.modification.impide.NTypeName]]></Type>
  </Nonterminal>
  <Production id="silver_modification_impide_propType_URL">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PpropType_URL(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_TypeName" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_PropType_url_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_propType_Path">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PpropType_Path(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_TypeName" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_PropType_path_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_propType_Integer">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PpropType_Integer(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_TypeName" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_PropType_integer_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_impide_propType_String">
    <Code><![CDATA[
RESULT = new silver.modification.impide.PpropType_String(_children[0]);
]]></Code>
    <LHS><NonterminalRef id="silver_modification_impide_TypeName" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_modification_impide_ImpIde_PropType_string_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_let_fix_AssignExpr">
    <PP>silver:modification:let_fix:AssignExpr</PP>
    <Type><![CDATA[silver.modification.let_fix.NAssignExpr]]></Type>
  </Nonterminal>
  <Production id="silver_modification_let_fix_assignExpr">
    <Code><![CDATA[
RESULT = new silver.modification.let_fix.PassignExpr(_children[0], _children[1], _children[2], _children[3], _children[4], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_let_fix_AssignExpr" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /><TerminalRef id="silver_definition_core_ColonColon_t" grammar="host" /><NonterminalRef id="silver_definition_type_syntax_TypeExpr" grammar="host" /><TerminalRef id="silver_definition_core_Equal_t" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_let_fix_LetAssigns">
    <PP>silver:modification:let_fix:LetAssigns</PP>
    <Type><![CDATA[silver.modification.let_fix.NLetAssigns]]></Type>
  </Nonterminal>
  <Production id="silver_modification_let_fix_assignListSingle">
    <Code><![CDATA[
RESULT = new silver.modification.let_fix.PassignListSingle(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_let_fix_LetAssigns" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_let_fix_AssignExpr" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_let_fix_assignsListCons">
    <Code><![CDATA[
RESULT = new silver.modification.let_fix.PassignsListCons(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_let_fix_LetAssigns" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_let_fix_AssignExpr" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_modification_let_fix_LetAssigns" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_primitivepattern_PrimPattern">
    <PP>silver:modification:primitivepattern:PrimPattern</PP>
    <Type><![CDATA[silver.modification.primitivepattern.NPrimPattern]]></Type>
  </Nonterminal>
  <Production id="silver_modification_primitivepattern_prodPattern">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PprodPattern(_children[0], _children[1], _children[2], _children[3], _children[4], _children[5], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_PrimPattern" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_QName" grammar="host" /><TerminalRef id="silver_definition_core_LParen_t" grammar="host" /><NonterminalRef id="silver_modification_primitivepattern_VarBinders" grammar="host" /><TerminalRef id="silver_definition_core_RParen_t" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Arrow_kwd" grammar="host" /><NonterminalRef id="silver_definition_core_Expr" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_primitivepattern_PrimPatterns">
    <PP>silver:modification:primitivepattern:PrimPatterns</PP>
    <Type><![CDATA[silver.modification.primitivepattern.NPrimPatterns]]></Type>
  </Nonterminal>
  <Production id="silver_modification_primitivepattern_consPattern">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PconsPattern(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_PrimPatterns" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_primitivepattern_PrimPattern" grammar="host" /><TerminalRef id="silver_extension_patternmatching_Vbar_kwd" grammar="host" /><NonterminalRef id="silver_modification_primitivepattern_PrimPatterns" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_primitivepattern_onePattern">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PonePattern(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_PrimPatterns" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_primitivepattern_PrimPattern" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_primitivepattern_VarBinder">
    <PP>silver:modification:primitivepattern:VarBinder</PP>
    <Type><![CDATA[silver.modification.primitivepattern.NVarBinder]]></Type>
  </Nonterminal>
  <Production id="silver_modification_primitivepattern_ignoreVarBinder">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PignoreVarBinder(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_VarBinder" grammar="host" /></LHS>
    <RHS><TerminalRef id="silver_definition_core_UnderScore_t" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_primitivepattern_varVarBinder">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PvarVarBinder(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_VarBinder" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_definition_core_Name" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="silver_modification_primitivepattern_VarBinders">
    <PP>silver:modification:primitivepattern:VarBinders</PP>
    <Type><![CDATA[silver.modification.primitivepattern.NVarBinders]]></Type>
  </Nonterminal>
  <Production id="silver_modification_primitivepattern_nilVarBinder">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PnilVarBinder(common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_VarBinders" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="silver_modification_primitivepattern_consVarBinder">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PconsVarBinder(_children[0], _children[1], _children[2], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_VarBinders" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_primitivepattern_VarBinder" grammar="host" /><TerminalRef id="silver_definition_core_Comma_t" grammar="host" /><NonterminalRef id="silver_modification_primitivepattern_VarBinders" grammar="host" /></RHS>
  </Production>
  <Production id="silver_modification_primitivepattern_oneVarBinder">
    <Code><![CDATA[
RESULT = new silver.modification.primitivepattern.PoneVarBinder(_children[0], common.Terminal.createSpan(_children, virtualLocation, (int)_pos.getPos()));
]]></Code>
    <LHS><NonterminalRef id="silver_modification_primitivepattern_VarBinders" grammar="host" /></LHS>
    <RHS><NonterminalRef id="silver_modification_primitivepattern_VarBinder" grammar="host" /></RHS>
  </Production>

    </Declarations>
  </Grammar>
</CopperSpec>