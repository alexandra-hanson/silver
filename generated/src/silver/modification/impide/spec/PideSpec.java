
package silver.modification.impide.spec;

// top::IdeSpec ::= grammarName::String ideName::String ideVersion::String ext::String ideFuncDcls::[IdeFunction] idePropDcls::[IdeProperty] wizards::[IdeWizardDcl] pspec::ParserSpec ideResources::[Pair<String String>] 
public final class PideSpec extends silver.modification.impide.spec.NIdeSpec {

	public static final int i_grammarName = 0;
	public static final int i_ideName = 1;
	public static final int i_ideVersion = 2;
	public static final int i_ext = 3;
	public static final int i_ideFuncDcls = 4;
	public static final int i_idePropDcls = 5;
	public static final int i_wizards = 6;
	public static final int i_pspec = 7;
	public static final int i_ideResources = 8;


	public static final Class<?> childTypes[] = {common.StringCatter.class,common.StringCatter.class,common.StringCatter.class,common.StringCatter.class,common.DecoratedNode.class,common.DecoratedNode.class,common.DecoratedNode.class,silver.definition.concrete_syntax.NParserSpec.class,common.DecoratedNode.class};

	public static final int num_local_attrs = Init.count_local__ON__silver_modification_impide_spec_ideSpec;
	public static final String[] occurs_local = new String[num_local_attrs];

	public static final common.Lazy[] forwardInheritedAttributes = new common.Lazy[silver.modification.impide.spec.NIdeSpec.num_inh_attrs];

	public static final common.Lazy[] synthesizedAttributes = new common.Lazy[silver.modification.impide.spec.NIdeSpec.num_syn_attrs];
	public static final common.Lazy[][] childInheritedAttributes = new common.Lazy[9][];

	public static final common.Lazy[] localAttributes = new common.Lazy[num_local_attrs];
	public static final common.Lazy[][] localInheritedAttributes = new common.Lazy[num_local_attrs][];

	static {
	childInheritedAttributes[i_pspec] = new common.Lazy[silver.definition.concrete_syntax.NParserSpec.num_inh_attrs];

	}

	public PideSpec(final Object c_grammarName, final Object c_ideName, final Object c_ideVersion, final Object c_ext, final Object c_ideFuncDcls, final Object c_idePropDcls, final Object c_wizards, final Object c_pspec, final Object c_ideResources) {
		super();
		this.child_grammarName = c_grammarName;
		this.child_ideName = c_ideName;
		this.child_ideVersion = c_ideVersion;
		this.child_ext = c_ext;
		this.child_ideFuncDcls = c_ideFuncDcls;
		this.child_idePropDcls = c_idePropDcls;
		this.child_wizards = c_wizards;
		this.child_pspec = c_pspec;
		this.child_ideResources = c_ideResources;

	}

	private Object child_grammarName;
	public final common.StringCatter getChild_grammarName() {
		return (common.StringCatter) (child_grammarName = common.Util.demand(child_grammarName));
	}

	private Object child_ideName;
	public final common.StringCatter getChild_ideName() {
		return (common.StringCatter) (child_ideName = common.Util.demand(child_ideName));
	}

	private Object child_ideVersion;
	public final common.StringCatter getChild_ideVersion() {
		return (common.StringCatter) (child_ideVersion = common.Util.demand(child_ideVersion));
	}

	private Object child_ext;
	public final common.StringCatter getChild_ext() {
		return (common.StringCatter) (child_ext = common.Util.demand(child_ext));
	}

	private Object child_ideFuncDcls;
	public final common.ConsCell getChild_ideFuncDcls() {
		return (common.ConsCell) (child_ideFuncDcls = common.Util.demand(child_ideFuncDcls));
	}

	private Object child_idePropDcls;
	public final common.ConsCell getChild_idePropDcls() {
		return (common.ConsCell) (child_idePropDcls = common.Util.demand(child_idePropDcls));
	}

	private Object child_wizards;
	public final common.ConsCell getChild_wizards() {
		return (common.ConsCell) (child_wizards = common.Util.demand(child_wizards));
	}

	private Object child_pspec;
	public final silver.definition.concrete_syntax.NParserSpec getChild_pspec() {
		return (silver.definition.concrete_syntax.NParserSpec) (child_pspec = common.Util.demand(child_pspec));
	}

	private Object child_ideResources;
	public final common.ConsCell getChild_ideResources() {
		return (common.ConsCell) (child_ideResources = common.Util.demand(child_ideResources));
	}



	@Override
	public Object getChild(final int index) {
		switch(index) {
			case i_grammarName: return getChild_grammarName();
			case i_ideName: return getChild_ideName();
			case i_ideVersion: return getChild_ideVersion();
			case i_ext: return getChild_ext();
			case i_ideFuncDcls: return getChild_ideFuncDcls();
			case i_idePropDcls: return getChild_idePropDcls();
			case i_wizards: return getChild_wizards();
			case i_pspec: return getChild_pspec();
			case i_ideResources: return getChild_ideResources();

			default: return null;
		}
	}

	@Override
	public Object getChildLazy(final int index) {
		switch(index) {
			case i_grammarName: return child_grammarName;
			case i_ideName: return child_ideName;
			case i_ideVersion: return child_ideVersion;
			case i_ext: return child_ext;
			case i_ideFuncDcls: return child_ideFuncDcls;
			case i_idePropDcls: return child_idePropDcls;
			case i_wizards: return child_wizards;
			case i_pspec: return child_pspec;
			case i_ideResources: return child_ideResources;

			default: return null;
		}
	}

	@Override
	public final int getNumberOfChildren() {
		return 9;
	}

	@Override
	public common.Lazy getSynthesized(final int index) {
		return synthesizedAttributes[index];
	}

	@Override
	public common.Lazy[] getLocalInheritedAttributes(final int key) {
		return localInheritedAttributes[key];
	}

	@Override
	public common.Lazy[] getChildInheritedAttributes(final int key) {
		return childInheritedAttributes[key];
	}

	@Override
	public boolean hasForward() {
		return false;
	}

	@Override
	public common.Node evalForward(final common.DecoratedNode context) {
		throw new common.exceptions.SilverInternalError("Production silver:modification:impide:spec:ideSpec erroneously claimed to forward");
	}

	@Override
	public common.Lazy getForwardInheritedAttributes(final int index) {
		return forwardInheritedAttributes[index];
	}

	@Override
	public common.Lazy getLocal(final int key) {
		return localAttributes[key];
	}

	@Override
	public final int getNumberOfLocalAttrs() {
		return num_local_attrs;
	}

	@Override
	public final String getNameOfLocalAttr(final int index) {
		return occurs_local[index];
	}

	@Override
	public String getName() {
		return "silver:modification:impide:spec:ideSpec";
	}

	static void initProductionAttributeDefinitions() {
		// top.ideName = ideName
		silver.modification.impide.spec.PideSpec.synthesizedAttributes[silver.modification.impide.spec.Init.silver_modification_impide_spec_ideName__ON__silver_modification_impide_spec_IdeSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)); } };
		// top.ideVersion = ideVersion
		silver.modification.impide.spec.PideSpec.synthesizedAttributes[silver.modification.impide.spec.Init.silver_modification_impide_spec_ideVersion__ON__silver_modification_impide_spec_IdeSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideVersion)); } };
		// top.pluginGrammar = grammarName
		silver.modification.impide.spec.PideSpec.synthesizedAttributes[silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginGrammar__ON__silver_modification_impide_spec_IdeSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_grammarName)); } };
		// top.pluginParserClass = makeParserName(pspec.fullName)
		silver.modification.impide.spec.PideSpec.synthesizedAttributes[silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginParserClass__ON__silver_modification_impide_spec_IdeSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)silver.translation.java.core.PmakeParserName.invoke(context.childDecoratedSynthesizedLazy(silver.modification.impide.spec.PideSpec.i_pspec, silver.definition.concrete_syntax.Init.silver_definition_env_fullName__ON__silver_definition_concrete_syntax_ParserSpec))); } };
		// top.ideResources = ideResources
		silver.modification.impide.spec.PideSpec.synthesizedAttributes[silver.modification.impide.spec.Init.silver_modification_impide_spec_ideResources__ON__silver_modification_impide_spec_IdeSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.ConsCell)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideResources)); } };
		// implang = ideName
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.implang__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)); } };
		// package = makeName(grammarName)
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)silver.translation.java.core.PmakeName.invoke(context.childAsIsLazy(silver.modification.impide.spec.PideSpec.i_grammarName))); } };
		// bundle = package
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)); } };
		// pluginPkgPath = "src/" ++ grammarToPath(grammarName)
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.pluginPkgPath__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)(new common.StringCatter("src/")), (common.StringCatter)((common.StringCatter)silver.driver.util.PgrammarToPath.invoke(context.childAsIsLazy(silver.modification.impide.spec.PideSpec.i_grammarName)))); } };
		// ast = pspec.cstAst
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.ast__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((silver.definition.concrete_syntax.ast.NSyntaxRoot)context.childDecorated(silver.modification.impide.spec.PideSpec.i_pspec).synthesized(silver.definition.concrete_syntax.Init.silver_definition_concrete_syntax_cstAst__ON__silver_definition_concrete_syntax_ParserSpec)); } };
		// funcs = foldr(consIdeFunction, nilIdeFunction(), ideFuncDcls)
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((silver.modification.impide.spec.NIdeFunctions)core.Pfoldr.invoke(silver.modification.impide.spec.PconsIdeFunction.factory, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((silver.modification.impide.spec.NIdeFunctions)new silver.modification.impide.spec.PnilIdeFunction()); } }, context.childAsIsLazy(silver.modification.impide.spec.PideSpec.i_ideFuncDcls))); } };
		// funcs.bundle = bundle
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_bundle__ON__silver_modification_impide_spec_IdeFunctions] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)); } };
		// funcs.implang = implang
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_implang__ON__silver_modification_impide_spec_IdeFunctions] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.implang__ON__silver_modification_impide_spec_ideSpec)); } };
		// funcs.visibleName = ideName
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_visibleName__ON__silver_modification_impide_spec_IdeFunctions] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)); } };
		// funcs.package = package
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_package__ON__silver_modification_impide_spec_IdeFunctions] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)); } };
		// wizs = foldr(consIdeWizard, nilIdeWizard(), wizards)
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((silver.modification.impide.spec.NIdeWizards)core.Pfoldr.invoke(silver.modification.impide.spec.PconsIdeWizard.factory, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((silver.modification.impide.spec.NIdeWizards)new silver.modification.impide.spec.PnilIdeWizard()); } }, context.childAsIsLazy(silver.modification.impide.spec.PideSpec.i_wizards))); } };
		// wizs.bundle = bundle
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_bundle__ON__silver_modification_impide_spec_IdeWizards] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)); } };
		// wizs.implang = implang
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_implang__ON__silver_modification_impide_spec_IdeWizards] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.implang__ON__silver_modification_impide_spec_ideSpec)); } };
		// wizs.visibleName = ideName
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_visibleName__ON__silver_modification_impide_spec_IdeWizards] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)); } };
		// wizs.package = package
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_package__ON__silver_modification_impide_spec_IdeWizards] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)); } };
		// wizs.pluginPkgPath = pluginPkgPath
		silver.modification.impide.spec.PideSpec.localInheritedAttributes[silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec][silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginPkgPath__ON__silver_modification_impide_spec_IdeWizards] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.pluginPkgPath__ON__silver_modification_impide_spec_ideSpec)); } };
		// tabs = if null(idePropDcls) then [] else [ "edu.umn.cs.melt.ide.eclipse.property.TabCommons" ]
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.tabs__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return (((Boolean)core.Pnull.invoke(context.childAsIsLazy(silver.modification.impide.spec.PideSpec.i_idePropDcls))) ? ((common.ConsCell)core.Pnil.invoke()) : ((common.ConsCell)core.Pcons.invoke((new common.StringCatter("edu.umn.cs.melt.ide.eclipse.property.TabCommons")), new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pnil.invoke()); } }))); } };
		// sourceGrammarName = makeName(pspec.sourceGrammar)
		silver.modification.impide.spec.PideSpec.localAttributes[silver.modification.impide.spec.Init.sourceGrammarName__ON__silver_modification_impide_spec_ideSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.StringCatter)silver.translation.java.core.PmakeName.invoke(context.childDecoratedSynthesizedLazy(silver.modification.impide.spec.PideSpec.i_pspec, silver.definition.concrete_syntax.Init.silver_definition_env_sourceGrammar__ON__silver_definition_concrete_syntax_ParserSpec))); } };
		// top.pluginFiles = [ pair(pluginPkgPath ++ "SVIdeInterface.java", "\npackage " ++ package ++ ";\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.Iterator;\n\nimport common.ConsCell;\nimport common.Node;\nimport common.StringCatter;\nimport core.NIOVal;\nimport core.Pioval;\n\nimport org.eclipse.jface.text.IRegion;\nimport org.eclipse.core.resources.IProject;\n\nimport edu.umn.cs.melt.ide.eclipse.property.IPropertyPageTab;\nimport edu.umn.cs.melt.ide.silver.property.ui.IPropertyControlsProvider;\nimport edu.umn.cs.melt.ide.impl.SVDefault;\nimport edu.umn.cs.melt.copper.runtime.logging.CopperParserException;\nimport edu.umn.cs.melt.ide.copper.coloring.ITokenClassifier;\nimport edu.umn.cs.melt.ide.imp.services.IdeParseResult;\n\npublic class SVIdeInterface extends SVDefault {\n\n\tpublic SVIdeInterface() {}\n@Override\n\tpublic String name() { return \"" ++ implang ++ "\"; }\n\t@Override\n\tpublic String pluginId() { return \"" ++ bundle ++ "\"; }\n\t@Override\n\tpublic String markerErrorName() { return \"" ++ bundle ++ "." ++ extid_problem ++ "\"; }\n\t@Override\n\tpublic String getNatureId() { return \"" ++ bundle ++ "." ++ extid_nature ++ "\"; }\n\t@Override\n\tpublic String fileExtension() { return \"" ++ ext ++ "\"; }\n\t@Override\n\tpublic IPropertyControlsProvider getProjectProperties() {\n\t\treturn new " ++ package ++ ".eclipse.property.PropertyControlsProvider();\n\t}\n\t@Override\n\tpublic String getInitialProjectProperties() {\n\t\treturn " ++ package ++ ".eclipse.wizard.newproject.PropertyGenerator.getAll();\n\t}\n\t@Override\n\tpublic IPropertyPageTab[] getPropertyTabs() {\n\t\treturn new IPropertyPageTab[] {\n\t\t\t" ++ implode(", ", map(newTabClass, tabs)) ++ "\n\t\t};\n\t}\n\t@Override\n\tpublic ITokenClassifier getTokenClassifier() {\n\t\treturn new " ++ package ++ ".imp.coloring." ++ top.pluginParserClass ++ "_TokenClassifier();\n\t}\n\tprivate " ++ sourceGrammarName ++ "." ++ top.pluginParserClass ++ " parser = new " ++ sourceGrammarName ++ "." ++ top.pluginParserClass ++ "();\n\t@Override\n\tpublic IdeParseResult<Node> parse(Reader input, String filename) throws CopperParserException, IOException {\n\t\t// In the long run, maybe we should have a getParser() rather than parse() so things could be concurrent... TODO\n\t\tsynchronized(parser) {\n\t\t\tparser.reset();\n\t\t\treturn new IdeParseResult<Node>((Node)parser.parse(input, filename), parser.getTokens());\n\t\t}\n\t}\n\n\n\n" ++ funcs.svIdeInterface ++ "\n" ++ wizs.svIdeInterface ++ "\n}\n"), pair("plugin.xml", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?eclipse version=\"3.0\"?>\n<plugin>\n\n<extension point=\"org.eclipse.imp.runtime.languageDescription\">\n  <language extensions=\"" ++ ext ++ "\" description=\"nothing here\" natureID=\"" ++ bundle ++ "." ++ extid_nature ++ "\" language=\"" ++ implang ++ "\">\n  </language>\n</extension>\n\n<extension point=\"org.eclipse.imp.runtime.parser\">\n  <parserWrapper class=\"edu.umn.cs.melt.ide.imp.services.ParseController\" language=\"" ++ implang ++ "\">\n  </parserWrapper>\n</extension>\n\n<extension point=\"org.eclipse.core.resources.builders\" id=\"" ++ extid_builder ++ "\" name=\"" ++ ideName ++ " builder\">\n  <builder hasNature=\"true\">\n    <run class=\"edu.umn.cs.melt.ide.imp.builders.Builder\">\n    </run>\n  </builder>\n</extension>\n\n<extension point=\"org.eclipse.core.resources.natures\" id=\"" ++ extid_nature ++ "\" name=\"" ++ ideName ++ " Nature\">\n  <builder id=\"" ++ bundle ++ "." ++ extid_builder ++ "\" />\n  <runtime>\n    <run class=\"edu.umn.cs.melt.ide.imp.builders.Nature\">\n      <parameter name=\"builder\" value=\"" ++ bundle ++ "." ++ extid_builder ++ "\" />\n    </run>\n  </runtime>\n</extension>\n\n<extension point=\"org.eclipse.ui.perspectives\">\n  <perspective\n      class=\"edu.umn.cs.melt.ide.eclipse.Perspective\"\n      id=\"" ++ bundle ++ "." ++ extid_perspective ++ "\"\n      name=\"" ++ ideName ++ "\">\n  </perspective>\n</extension>\n\n<extension point=\"org.eclipse.core.resources.markers\" id=\"" ++ extid_problem ++ "\" name=\"" ++ ideName ++ " Error\">\n  <super type=\"org.eclipse.core.resources.problemmarker\" />\n  <persistent value=\"true\" />\n</extension>\n\n<extension point=\"org.eclipse.imp.runtime.tokenColorer\">\n  <tokenColorer class=\"edu.umn.cs.melt.ide.imp.services.Colorer\" language=\"" ++ implang ++ "\">\n  </tokenColorer>\n</extension>\n\n<extension point=\"org.eclipse.ui.popupMenus\">\n  <objectContribution objectClass=\"org.eclipse.core.resources.IProject\" adaptable=\"true\" nameFilter=\"*\" id=\"" ++ bundle ++ "." ++ extid_projectmenu ++ "\">\n\n    <action\n        label=\"Enable " ++ ideName ++ " Builder\"\n        tooltip=\"Enable the " ++ ideName ++ " builder for this project\"\n        id=\"" ++ bundle ++ "." ++ extid_action_nature ++ "\">\n      <class class=\"edu.umn.cs.melt.ide.imp.builders.EnableNature\">\n        <parameter name=\"nature\" value=\"" ++ bundle ++ "." ++ extid_nature ++ "\" />\n      </class>\n    </action>\n\n" ++ funcs.pluginXmlActions ++ "\n\n  </objectContribution>\n</extension>\n\n<extension point=\"org.eclipse.ui.newWizards\">\n  <category\n      id=\"" ++ bundle ++ "." ++ extid_wizard_category ++ "\"\n      name=\"" ++ ideName ++ "\">\n  </category>\n  <wizard\n      category=\"" ++ bundle ++ "." ++ extid_wizard_category ++ "\"\n      class=\"edu.umn.cs.melt.ide.wizard.NewProjectWizard\"\n      id=\"" ++ bundle ++ "." ++ extid_wizard_newproject ++ "\"\n      name=\"New " ++ ideName ++ " Project\"\n      finalPerspective=\"" ++ bundle ++ "." ++ extid_perspective ++ "\"\n      project=\"true\">\n  </wizard>\n  \n" ++ wizs.pluginXmlWizards ++ "\n\n</extension>\n\n<extension point=\"org.eclipse.ui.propertyPages\">\n  <page\n      class=\"edu.umn.cs.melt.ide.eclipse.property.MultiTabPropertyPage\"\n      id=\"" ++ bundle ++ "." ++ extid_properties ++ "\"\n      name=\"" ++ ideName ++ "\">\n    <enabledWhen>\n      <and>\n        <instanceof value=\"org.eclipse.core.resources.IProject\"/>\n        <adapt type=\"org.eclipse.core.resources.IResource\">\n          <test property=\"org.eclipse.core.resources.projectNature\"\n                value=\"" ++ bundle ++ "." ++ extid_nature ++ "\">\n          </test>\n        </adapt>\n      </and>\n    </enabledWhen>\n  </page>\n</extension>\n\n" ++ funcs.pluginXml ++ "\n\n</plugin>\n"), pair(pluginPkgPath ++ "Plugin.java", "\npackage " ++ package ++ ";\n\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.BundleActivator;\n\nimport edu.umn.cs.melt.ide.impl.SVRegistry;\n\npublic class Plugin implements BundleActivator {\n\n    public void start(BundleContext context) throws Exception {\n\n        Init.initAllStatics();\n        Init.init();\n        Init.postInit();\n\n        SVRegistry.register(new SVIdeInterface());\n    }\n\n    @Override\n    public void stop(BundleContext context) throws Exception {\n    }\n}\n"), pair(pluginPkgPath ++ "eclipse/property/PropertyControlsProvider.java", getPropertyProvider(package, idePropDcls, "property")), pair(pluginPkgPath ++ "eclipse/wizard/newproject/PropertyGenerator.java", getPropertyGenerator(package, idePropDcls, "newproject")), pair(pluginPkgPath ++ "imp/coloring/" ++ top.pluginParserClass ++ "_TokenClassifier.java", getTokenClassifier(package, ast.fontList, ast.termFontPairList, top.pluginParserClass)) ] ++ wizs.pluginFiles
		silver.modification.impide.spec.PideSpec.synthesizedAttributes[silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginFiles__ON__silver_modification_impide_spec_IdeSpec] = new common.Lazy() { public final Object eval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pappend.invoke(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pcons.invoke(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((core.NPair)new core.Ppair(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.pluginPkgPath__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)(new common.StringCatter("SVIdeInterface.java"))); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)(new common.StringCatter("\npackage ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(";\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.Iterator;\n\nimport common.ConsCell;\nimport common.Node;\nimport common.StringCatter;\nimport core.NIOVal;\nimport core.Pioval;\n\nimport org.eclipse.jface.text.IRegion;\nimport org.eclipse.core.resources.IProject;\n\nimport edu.umn.cs.melt.ide.eclipse.property.IPropertyPageTab;\nimport edu.umn.cs.melt.ide.silver.property.ui.IPropertyControlsProvider;\nimport edu.umn.cs.melt.ide.impl.SVDefault;\nimport edu.umn.cs.melt.copper.runtime.logging.CopperParserException;\nimport edu.umn.cs.melt.ide.copper.coloring.ITokenClassifier;\nimport edu.umn.cs.melt.ide.imp.services.IdeParseResult;\n\npublic class SVIdeInterface extends SVDefault {\n\n\tpublic SVIdeInterface() {}\n@Override\n\tpublic String name() { return \"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.implang__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"; }\n\t@Override\n\tpublic String pluginId() { return \"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"; }\n\t@Override\n\tpublic String markerErrorName() { return \"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_problem.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"; }\n\t@Override\n\tpublic String getNatureId() { return \"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_nature.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"; }\n\t@Override\n\tpublic String fileExtension() { return \"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ext)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"; }\n\t@Override\n\tpublic IPropertyControlsProvider getProjectProperties() {\n\t\treturn new ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".eclipse.property.PropertyControlsProvider();\n\t}\n\t@Override\n\tpublic String getInitialProjectProperties() {\n\t\treturn ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".eclipse.wizard.newproject.PropertyGenerator.getAll();\n\t}\n\t@Override\n\tpublic IPropertyPageTab[] getPropertyTabs() {\n\t\treturn new IPropertyPageTab[] {\n\t\t\t")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)core.Pimplode.invoke((new common.StringCatter(", ")), new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pmap.invoke(silver.modification.impide.spec.PnewTabClass.factory, context.localAsIsLazy(silver.modification.impide.spec.Init.tabs__ON__silver_modification_impide_spec_ideSpec))); } })), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\n\t\t};\n\t}\n\t@Override\n\tpublic ITokenClassifier getTokenClassifier() {\n\t\treturn new ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".imp.coloring.")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginParserClass__ON__silver_modification_impide_spec_IdeSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("_TokenClassifier();\n\t}\n\tprivate ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.sourceGrammarName__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginParserClass__ON__silver_modification_impide_spec_IdeSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(" parser = new ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.sourceGrammarName__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginParserClass__ON__silver_modification_impide_spec_IdeSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("();\n\t@Override\n\tpublic IdeParseResult<Node> parse(Reader input, String filename) throws CopperParserException, IOException {\n\t\t// In the long run, maybe we should have a getParser() rather than parse() so things could be concurrent... TODO\n\t\tsynchronized(parser) {\n\t\t\tparser.reset();\n\t\t\treturn new IdeParseResult<Node>((Node)parser.parse(input, filename), parser.getTokens());\n\t\t}\n\t}\n\n\n\n")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localDecorated(silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_svIdeInterface__ON__silver_modification_impide_spec_IdeFunctions)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\n")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localDecorated(silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_svIdeInterface__ON__silver_modification_impide_spec_IdeWizards)), (common.StringCatter)(new common.StringCatter("\n}\n")))))))))))))))))))))))))))))))))))))))); } })); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pcons.invoke(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((core.NPair)new core.Ppair((new common.StringCatter("plugin.xml")), new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)(new common.StringCatter("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?eclipse version=\"3.0\"?>\n<plugin>\n\n<extension point=\"org.eclipse.imp.runtime.languageDescription\">\n  <language extensions=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ext)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" description=\"nothing here\" natureID=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_nature.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" language=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.implang__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n  </language>\n</extension>\n\n<extension point=\"org.eclipse.imp.runtime.parser\">\n  <parserWrapper class=\"edu.umn.cs.melt.ide.imp.services.ParseController\" language=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.implang__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n  </parserWrapper>\n</extension>\n\n<extension point=\"org.eclipse.core.resources.builders\" id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_builder.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" name=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(" builder\">\n  <builder hasNature=\"true\">\n    <run class=\"edu.umn.cs.melt.ide.imp.builders.Builder\">\n    </run>\n  </builder>\n</extension>\n\n<extension point=\"org.eclipse.core.resources.natures\" id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_nature.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" name=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(" Nature\">\n  <builder id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_builder.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" />\n  <runtime>\n    <run class=\"edu.umn.cs.melt.ide.imp.builders.Nature\">\n      <parameter name=\"builder\" value=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_builder.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" />\n    </run>\n  </runtime>\n</extension>\n\n<extension point=\"org.eclipse.ui.perspectives\">\n  <perspective\n      class=\"edu.umn.cs.melt.ide.eclipse.Perspective\"\n      id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_perspective.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"\n      name=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n  </perspective>\n</extension>\n\n<extension point=\"org.eclipse.core.resources.markers\" id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_problem.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" name=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(" Error\">\n  <super type=\"org.eclipse.core.resources.problemmarker\" />\n  <persistent value=\"true\" />\n</extension>\n\n<extension point=\"org.eclipse.imp.runtime.tokenColorer\">\n  <tokenColorer class=\"edu.umn.cs.melt.ide.imp.services.Colorer\" language=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.implang__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n  </tokenColorer>\n</extension>\n\n<extension point=\"org.eclipse.ui.popupMenus\">\n  <objectContribution objectClass=\"org.eclipse.core.resources.IProject\" adaptable=\"true\" nameFilter=\"*\" id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_projectmenu.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n\n    <action\n        label=\"Enable ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(" Builder\"\n        tooltip=\"Enable the ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(" builder for this project\"\n        id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_action_nature.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n      <class class=\"edu.umn.cs.melt.ide.imp.builders.EnableNature\">\n        <parameter name=\"nature\" value=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_nature.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\" />\n      </class>\n    </action>\n\n")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localDecorated(silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginXmlActions__ON__silver_modification_impide_spec_IdeFunctions)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\n\n  </objectContribution>\n</extension>\n\n<extension point=\"org.eclipse.ui.newWizards\">\n  <category\n      id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_wizard_category.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"\n      name=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n  </category>\n  <wizard\n      category=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_wizard_category.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"\n      class=\"edu.umn.cs.melt.ide.wizard.NewProjectWizard\"\n      id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_wizard_newproject.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"\n      name=\"New ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(" Project\"\n      finalPerspective=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_perspective.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"\n      project=\"true\">\n  </wizard>\n  \n")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localDecorated(silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginXmlWizards__ON__silver_modification_impide_spec_IdeWizards)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\n\n</extension>\n\n<extension point=\"org.eclipse.ui.propertyPages\">\n  <page\n      class=\"edu.umn.cs.melt.ide.eclipse.property.MultiTabPropertyPage\"\n      id=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_properties.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\"\n      name=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.childAsIs(silver.modification.impide.spec.PideSpec.i_ideName)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n    <enabledWhen>\n      <and>\n        <instanceof value=\"org.eclipse.core.resources.IProject\"/>\n        <adapt type=\"org.eclipse.core.resources.IResource\">\n          <test property=\"org.eclipse.core.resources.projectNature\"\n                value=\"")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.bundle__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter(".")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)silver.modification.impide.spec.Init.extid_nature.eval()), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("\">\n          </test>\n        </adapt>\n      </and>\n    </enabledWhen>\n  </page>\n</extension>\n\n")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localDecorated(silver.modification.impide.spec.Init.funcs__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginXml__ON__silver_modification_impide_spec_IdeFunctions)), (common.StringCatter)(new common.StringCatter("\n\n</plugin>\n")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))); } })); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pcons.invoke(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((core.NPair)new core.Ppair(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.pluginPkgPath__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)(new common.StringCatter("Plugin.java"))); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)(new common.StringCatter("\npackage ")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)(new common.StringCatter(";\n\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.BundleActivator;\n\nimport edu.umn.cs.melt.ide.impl.SVRegistry;\n\npublic class Plugin implements BundleActivator {\n\n    public void start(BundleContext context) throws Exception {\n\n        Init.initAllStatics();\n        Init.init();\n        Init.postInit();\n\n        SVRegistry.register(new SVIdeInterface());\n    }\n\n    @Override\n    public void stop(BundleContext context) throws Exception {\n    }\n}\n")))); } })); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pcons.invoke(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((core.NPair)new core.Ppair(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.pluginPkgPath__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)(new common.StringCatter("eclipse/property/PropertyControlsProvider.java"))); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.StringCatter)silver.modification.impide.spec.PgetPropertyProvider.invoke(context.localAsIsLazy(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec), context.childAsIsLazy(silver.modification.impide.spec.PideSpec.i_idePropDcls), (new common.StringCatter("property")))); } })); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pcons.invoke(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((core.NPair)new core.Ppair(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.pluginPkgPath__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)(new common.StringCatter("eclipse/wizard/newproject/PropertyGenerator.java"))); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.StringCatter)silver.modification.impide.spec.PgetPropertyGenerator.invoke(context.localAsIsLazy(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec), context.childAsIsLazy(silver.modification.impide.spec.PideSpec.i_idePropDcls), (new common.StringCatter("newproject")))); } })); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pcons.invoke(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((core.NPair)new core.Ppair(new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return new common.StringCatter((common.StringCatter)((common.StringCatter)context.localAsIs(silver.modification.impide.spec.Init.pluginPkgPath__ON__silver_modification_impide_spec_ideSpec)), (common.StringCatter)new common.StringCatter((common.StringCatter)(new common.StringCatter("imp/coloring/")), (common.StringCatter)new common.StringCatter((common.StringCatter)((common.StringCatter)context.synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginParserClass__ON__silver_modification_impide_spec_IdeSpec)), (common.StringCatter)(new common.StringCatter("_TokenClassifier.java"))))); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.StringCatter)silver.modification.impide.spec.PgetTokenClassifier.invoke(context.localAsIsLazy(silver.modification.impide.spec.Init.package__ON__silver_modification_impide_spec_ideSpec), new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)context.localDecorated(silver.modification.impide.spec.Init.ast__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.cstast.Init.silver_modification_impide_cstast_fontList__ON__silver_definition_concrete_syntax_ast_SyntaxRoot)); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)context.localDecorated(silver.modification.impide.spec.Init.ast__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.cstast.Init.silver_modification_impide_cstast_termFontPairList__ON__silver_definition_concrete_syntax_ast_SyntaxRoot)); } }, context.contextSynthesizedLazy(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginParserClass__ON__silver_modification_impide_spec_IdeSpec))); } })); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)core.Pnil.invoke()); } })); } })); } })); } })); } })); } })); } }, new common.Thunk<Object>(context) { public final Object doEval(final common.DecoratedNode context) { return ((common.ConsCell)context.localDecorated(silver.modification.impide.spec.Init.wizs__ON__silver_modification_impide_spec_ideSpec).synthesized(silver.modification.impide.spec.Init.silver_modification_impide_spec_pluginFiles__ON__silver_modification_impide_spec_IdeWizards)); } })); } };

	}

	public static final common.NodeFactory<PideSpec> factory = new Factory();

	public static final class Factory extends common.NodeFactory<PideSpec> {

		@Override
		public PideSpec invoke(final Object[] children, final Object[] annotations) {
			return new PideSpec(children[0], children[1], children[2], children[3], children[4], children[5], children[6], children[7], children[8]);
		}
	};

}
